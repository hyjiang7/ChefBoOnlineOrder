{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/checkout.js\",\n    _this = this;\n\nimport React from 'react';\n\nvar moment = require('moment');\n\nvar checkout = function checkout() {\n  //select time tag: 15 min increments until close\n  //create all valid pickup times \n  var validTimes = ['11:15', '11:30', '11:45', '12:00', '12:15', '12:30', '12:45', '13:00', '13:15', '13:30', '13:45', '14:00', '14:15', '14:30', '14:45', '16:45', '17:00', '17:15', '17:45', '18:00', '18:15', '18:30', '18:45', '19:00', '19:15', '19:30', '19:45', '20:00', '20:15', '20:30', '20:45']; // var currentValidTimes;\n\n  var hoursOfOperation = [[], ['11:15', '2:45', '16:45', '20:30'], ['11:15', '2:45', '16:45', '20:30'], ['11:15', '2:45', '16:45', '20:30'], ['11:15', '2:45', '16:45', '20:30'], ['11:15', '2:45', '16:45', '21:00'], ['11:15', '2:45', '16:45', '21:00']];\n  var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  var closed = true; // const today = new Date()\n  // const currentTime = today.getHours() + \":\" + today.getMinutes();\n  // const sunday =  today.getDay() == 0;\n  // const closed = currentTime > \"20:45\" || sunday;\n  // const saturday = today.getDay() == 6; //returns 6\n  // var pickupDate , pickupDay; \n  // var nextBusinessDay;\n  // if(closed)\n  // {\n  //     var daysToSkip; \n  //     saturday? daysToSkip = 2 : daysToSkip = 1;        \n  //     pickupDate = new Date(today.getTime() + (daysToSkip*86400000));\n  //     pickupDay = days[pickupDate.getDay()]\n  //     console.log(\"store closed, pickup will be for when we open for business on \", pickupDay, pickupDate.getMonth() +1, \"/\" ,pickupDate.getDate(),  \"/\" , pickupDate.getFullYear())\n  //     //if today is sat, then we open on monday\n  //     nextBusinessDay = `${pickupDay} ${pickupDate.getMonth() +1}/${pickupDate.getDate()}/${pickupDate.getFullYear()}`;\n  //     validTimes.splice(0,1);\n  // }\n  // else {\n  //     var index; \n  //     console.log(typeof(currentTime))\n  //     console.log(new Date(currentTime) < new Date('11:34'))\n  //     validTimes.every( (i, ind) => {\n  //         if(currentTime > i)\n  //         {\n  //             index = ind\n  //             return false;   \n  //         }\n  //         return true;\n  //     })\n  //     console.log(index)\n  //     validTimes.splice(0, index + 1);\n  // }\n\n  var today = moment.utc(moment().format('MM-DD-YY HH:mm')).utcOffset('PST');\n  var day = today.day(); //number\n\n  var dayStr = today.format('dddd'); //friday\n\n  var currTime = today.format('HH:mm'); //string\n\n  var date = today.format('MM-DD-YY'); //string\n\n  var validDays = [];\n  var validTimesToday = [];\n  console.log(\"\".concat(hoursOfOperation[day].slice(-1))); //check if today is closed by comparing today's day to hours of op\n\n  if (today.isBefore(\"\".concat(date, \" \").concat(hoursOfOperation[day].slice(-1)))) {\n    console.log('open');\n    validDays.push(\"Today (\".concat(date, \")\"));\n\n    if (day == 6) //if today is sat, give them today and monday\n      {\n        validDays.push(\"Monday (\".concat(today.add(2, 'days').format('MM-DD-YY'), \")\"));\n      } else {\n      //today and tmr \n      validDays.push(\"Tomorrow (\".concat(today.add(1, 'days').format('MM-DD-YY'), \")\"));\n    }\n\n    today = moment.utc(moment().format('MM-DD-YY HH:mm')).utcOffset('PST');\n    var index;\n    console.log(today.isBefore(\"\".concat(date, \" \").concat(validTimes[0]), 'minutes'));\n    var times = availablePickUpTimes(today, \"\".concat(date, \" 21:00\"));\n    console.log(times);\n  } else {\n    console.log('closed today'); //give them options for next two business days \n\n    validDays.push(\"Tomorrow (\".concat(today.add(1, 'days').format('MM-DD-YY'), \")\"));\n    validDays.push(\"Monday (\".concat(today.add(2, 'days').format('MM-DD-YY'), \")\"));\n  }\n\n  function availablePickUpTimes(startTime, endTime) {\n    var times = [];\n    var firstTime = startTime.add(15 - startTime.minute() % 15, 'm');\n    console.log(firstTime);\n\n    while (firstTime.isBefore(endTime)) {\n      times.push(new moment(firstTime).format());\n      firstTime.add('m', 15);\n    }\n\n    return times;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-12 col-sm-8 col-lg-6 m-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          htmlFor: \"time\",\n          children: \" Select Pick Up Date \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"day\",\n          className: \"form-control\",\n          children: validDays.map(function (i, ind) {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: i,\n              children: i\n            }, ind, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 25\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          htmlFor: \"time\",\n          children: \" Select Pick Up Date \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"day\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"time\",\n          className: \"form-control\",\n          children: validTimes.map(function (i, ind) {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\".concat(i),\n              children: i\n            }, ind, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 25\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"fname\",\n            children: \" First Name* \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"fname\",\n            type: \"text\",\n            className: \"form-control\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"lname\",\n            children: \" Last Name* \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"lname\",\n            type: \"text\",\n            className: \"form-control\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \" Email* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"email\",\n          type: \"email\",\n          className: \"form-control\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"phone\",\n          children: \" Phone number (digits only)* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"phone\",\n          type: \"tel\",\n          pattern: \"[0-9]{3}[0-9]{3}[0-9]{4}\",\n          className: \"form-control\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group d-flex justify-content-center \",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          children: \"Review and Submit Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, _this);\n};\n\nexport default checkout;","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/checkout.js"],"names":["React","moment","require","checkout","validTimes","hoursOfOperation","days","closed","today","utc","format","utcOffset","day","dayStr","currTime","date","validDays","validTimesToday","console","log","slice","isBefore","push","add","index","times","availablePickUpTimes","startTime","endTime","firstTime","minute","map","i","ind"],"mappings":"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","sourcesContent":["import React from 'react'\nconst moment = require('moment')\n\nconst checkout = () => {\n\n    //select time tag: 15 min increments until close\n\n    //create all valid pickup times \n    const validTimes = [\n    '11:15',\n    '11:30',\n    '11:45',\n    '12:00',\n    '12:15',\n    '12:30',\n    '12:45',\n    '13:00',\n    '13:15',\n    '13:30',\n    '13:45',\n    '14:00',\n    '14:15',\n    '14:30',\n    '14:45',\n    '16:45',\n    '17:00',\n    '17:15',\n    '17:45',\n    '18:00',\n    '18:15',\n    '18:30',\n    '18:45',\n    '19:00',\n    '19:15',\n    '19:30',\n    '19:45',\n    '20:00',\n    '20:15',\n    '20:30',\n    '20:45'\n    ]\n\n    \n    // var currentValidTimes;\n\n    const hoursOfOperation = [\n         [],\n         ['11:15', '2:45', '16:45', '20:30'],\n         ['11:15', '2:45', '16:45', '20:30'],\n          ['11:15', '2:45', '16:45', '20:30'],\n         ['11:15', '2:45', '16:45', '20:30'],\n        ['11:15', '2:45', '16:45', '21:00'],\n         ['11:15', '2:45', '16:45', '21:00']\n    ];\n\n    const days = [\n        'Sunday',\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday'\n    ]\n    const closed = true;\n\n    // const today = new Date()\n    // const currentTime = today.getHours() + \":\" + today.getMinutes();\n    // const sunday =  today.getDay() == 0;\n    // const closed = currentTime > \"20:45\" || sunday;\n    // const saturday = today.getDay() == 6; //returns 6\n    // var pickupDate , pickupDay; \n    // var nextBusinessDay;\n\n    // if(closed)\n    // {\n\n    //     var daysToSkip; \n    //     saturday? daysToSkip = 2 : daysToSkip = 1;        \n    //     pickupDate = new Date(today.getTime() + (daysToSkip*86400000));\n    //     pickupDay = days[pickupDate.getDay()]\n\n\n    //     console.log(\"store closed, pickup will be for when we open for business on \", pickupDay, pickupDate.getMonth() +1, \"/\" ,pickupDate.getDate(),  \"/\" , pickupDate.getFullYear())\n    //     //if today is sat, then we open on monday\n    //     nextBusinessDay = `${pickupDay} ${pickupDate.getMonth() +1}/${pickupDate.getDate()}/${pickupDate.getFullYear()}`;\n    //     validTimes.splice(0,1);\n    // }\n    // else {\n    //     var index; \n    //     console.log(typeof(currentTime))\n    //     console.log(new Date(currentTime) < new Date('11:34'))\n    //     validTimes.every( (i, ind) => {\n    //         if(currentTime > i)\n    //         {\n    //             index = ind\n    //             return false;   \n    //         }\n    \n    //         return true;\n    //     })\n    \n    //     console.log(index)\n\n    //     validTimes.splice(0, index + 1);\n    // }\n\n    \n    var today = moment.utc(moment().format('MM-DD-YY HH:mm')).utcOffset('PST')\n    const day = today.day() //number\n    const dayStr = today.format('dddd') //friday\n    const currTime = today.format('HH:mm')  //string\n    const date = today.format('MM-DD-YY')   //string\n\n\n\n    var validDays = []; \n    const validTimesToday = [];\n\n    console.log(`${hoursOfOperation[day].slice(-1)}`)\n    //check if today is closed by comparing today's day to hours of op\n\n    if(today.isBefore(`${date} ${hoursOfOperation[day].slice(-1)}`))\n    {\n        console.log('open')\n        validDays.push(`Today (${date})`)\n\n        if(day == 6) //if today is sat, give them today and monday\n        {\n            validDays.push (`Monday (${today.add(2, 'days').format('MM-DD-YY')})`)\n        }\n        else{   //today and tmr \n            validDays.push(`Tomorrow (${today.add(1, 'days').format('MM-DD-YY')})`)\n        }\n\n        today = moment.utc(moment().format('MM-DD-YY HH:mm')).utcOffset('PST');\n        var index;\n\n        console.log(today.isBefore(`${date} ${validTimes[0]}`, 'minutes'))\n\n        const times = availablePickUpTimes(today, `${date} 21:00`)\n\n        console.log(times)\n\n        \n    }\n    else\n    {\n        console.log('closed today')\n        //give them options for next two business days \n        validDays.push(`Tomorrow (${today.add(1, 'days').format('MM-DD-YY')})`)\n        validDays.push (`Monday (${today.add(2, 'days').format('MM-DD-YY')})`)\n        \n    }\n    \n    function availablePickUpTimes(startTime, endTime)\n    {\n        var times =[];\n        var firstTime = startTime.add(15 - startTime.minute() % 15, 'm');\n        \n        console.log(firstTime)\n        while(firstTime.isBefore(endTime))\n        {\n            times.push(new moment(firstTime).format());\n            firstTime.add('m', 15);\n        }\n\n        return times;\n    }\n    return (\n\n\n        <div className=\"col-12 col-sm-8 col-lg-6 m-auto\">\n            {/* {closed? <p style={{color: \"red\", fontWeight: \"bold\"}}> Store Closed! Pick up will be scheduled for {nextBusinessDay}!</p> : <p></p>} */}\n            <form className=\"form\">\n\n                <div className=\"form-group\">\n                <label\n                    className=\"\"\n                    htmlFor=\"time\"\n                > Select Pick Up Date </label>\n                <select name=\"day\" className=\"form-control\">\n                    {validDays.map((i, ind) =>(\n                        <option key={ind} value={i}>{i}</option>\n                    ))}\n                </select>\n                </div>\n\n                <div className=\"form-group\">\n                <label\n                    className=\"\"\n                    htmlFor=\"time\"\n                > Select Pick Up Date </label>\n                <select name=\"day\" className=\"form-control\">\n\n                </select>\n                <select name=\"time\" className=\"form-control\">\n                    {validTimes.map((i, ind) =>(\n                        <option key={ind} value={`${i}` }>{i}</option>\n                    ))}\n                </select>\n                </div>\n\n                <div className=\"row\">\n                <div className=\"col mb-2\">\n                <label htmlFor=\"fname\"> First Name* </label>\n                <input name=\"fname\" type=\"text\" className=\"form-control\" required/>\n                </div>\n\n\n                <div className=\"col\">\n                <label htmlFor=\"lname\"> Last Name* </label>\n                <input name=\"lname\" type=\"text\" className=\"form-control\" required/>\n                </div>\n                </div>\n\n                <div className=\"form-group\">\n                <label htmlFor=\"email\"> Email* </label>\n                <input name=\"email\" type=\"email\" className=\"form-control\" required/>\n                </div>\n\n\n                <div className=\"form-group\">\n                <label htmlFor=\"phone\"> Phone number (digits only)* </label>\n                <input name=\"phone\" type=\"tel\" pattern=\"[0-9]{3}[0-9]{3}[0-9]{4}\" className=\"form-control\" required/>\n                </div>\n\n\n                <div className=\"form-group d-flex justify-content-center \">\n                <button type=\"submit\" className=\"btn btn-primary\">Review and Submit Order</button>\n                </div>\n\n            </form>\n        </div>\n    )\n}\n\nexport default checkout\n"]},"metadata":{},"sourceType":"module"}