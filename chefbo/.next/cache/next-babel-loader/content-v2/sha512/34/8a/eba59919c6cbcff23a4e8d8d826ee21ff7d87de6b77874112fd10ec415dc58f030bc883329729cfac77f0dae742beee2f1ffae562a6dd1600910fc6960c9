{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/components/checkoutForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport store from \"../state/GlobalState\";\nimport payment from \"../styles/payment.module.css\";\n\nvar CheckoutForm = function CheckoutForm(secret, submit) {\n  _s();\n\n  var _useState = useState(false),\n      succeeded = _useState[0],\n      setSucceeded = _useState[1];\n\n  var _useState2 = useState(null),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(''),\n      processing = _useState3[0],\n      setProcessing = _useState3[1];\n\n  var _useState4 = useState(true),\n      disabled = _useState4[0],\n      setDisabled = _useState4[1];\n\n  var _useState5 = useState(''),\n      clientSecret = _useState5[0],\n      setClientSecret = _useState5[1];\n\n  var _useState6 = useState(''),\n      email = _useState6[0],\n      setEmail = _useState6[1];\n\n  var stripe = useStripe();\n  var elements = useElements(); //   async function getClientSecret()\n  //     {\n  //         const res = await fetch(`http://localhost:5001/create-payment-intent`, {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Accept': 'application/json',\n  //                 'Content-Type': 'application/json'\n  //             },\n  //             body: JSON.stringify(store.getState())\n  //         });\n  //         const response = await res.json();\n  //         setClientSecret(response.clientSecret)\n  //     }\n\n  useEffect(function () {\n    // Create PaymentIntent as soon as the page loads\n    setClientSecret(secret);\n  }, []);\n  var cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  var cardElementStyle = {\n    borderRadius: \"4px\",\n    padding: \"12px\",\n    border: \"2px solid rgba(50, 50, 93, 0.1)\",\n    maxHeight: \"44px\",\n    background: \"white\" // boxSizing: \"border-box\"\n\n  };\n\n  var handleChange = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Listen for changes in the CardElement\n              // and display any errors as the customer types their card details\n              setDisabled(event.empty);\n              setError(event.error ? event.error.message : \"\");\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleChange(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ev) {\n      var payload;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              ev.preventDefault();\n              setProcessing(true);\n              _context2.next = 4;\n              return stripe.confirmCardPayment(clientSecret, {\n                receipt_email: email,\n                payment_method: {\n                  card: elements.getElement(CardElement)\n                }\n              });\n\n            case 4:\n              payload = _context2.sent;\n\n              if (payload.error) {\n                setError(\"Payment failed \".concat(payload.error.message));\n                setProcessing(false);\n              } else {\n                setError(null);\n                setProcessing(false);\n                setSucceeded(true);\n              }\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSubmit(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"ml-2 mr-2 form-group text-center\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-left pb-2\",\n      children: \"Enter payment information:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      style: cardElementStyle,\n      children: /*#__PURE__*/_jsxDEV(CardElement, {\n        options: cardStyle,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-danger text-align-center block\",\n      disabled: processing || disabled || succeeded,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"\".concat(payment.spinner),\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, _this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, _this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-danger\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CheckoutForm, \"HQt8qBW5wYAHG7Qc6ca1WQp6zCs=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/components/checkoutForm.js"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","store","payment","CheckoutForm","secret","submit","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","email","setEmail","stripe","elements","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","cardElementStyle","borderRadius","padding","border","maxHeight","background","handleChange","event","empty","message","handleSubmit","ev","preventDefault","confirmCardPayment","receipt_email","payment_method","card","getElement","payload","spinner"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport store from \"../state/GlobalState\";\nimport payment from \"../styles/payment.module.css\";\n\n\n\nconst CheckoutForm = (secret, submit) =>{\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const [email, setEmail] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n\n\n//   async function getClientSecret()\n//     {\n//         const res = await fetch(`http://localhost:5001/create-payment-intent`, {\n//             method: 'POST',\n//             headers: {\n//                 'Accept': 'application/json',\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify(store.getState())\n//         });\n//         const response = await res.json();\n//         setClientSecret(response.clientSecret)\n//     }\n\n\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    setClientSecret(secret)\n  }, []);\n\n\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const cardElementStyle = {\n    borderRadius: \"4px\",\n    padding: \"12px\",\n    border: \"2px solid rgba(50, 50, 93, 0.1)\",\n    maxHeight: \"44px\",\n    background: \"white\",\n    // boxSizing: \"border-box\"\n  }\n\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      receipt_email: email,\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  return (\n    <form className=\"ml-2 mr-2 form-group text-center\" onSubmit={handleSubmit}>\n\n    {/* <div className=\"form-group\">\n          <label htmlFor=\"email\"></label>\n          <input name=\"email\" type=\"email\" className=\"form-control\" value={email} onChange={(e) => setEmail(e.target.value)} required placeholder=\"Enter email here\"/>\n        </div> */}\n    <div className=\"text-left pb-2\">Enter payment information:</div>\n    <div className=\"form-group\" style={cardElementStyle}>\n        <CardElement  options={cardStyle} onChange={handleChange} />\n    </div>\n      <button\n        className=\"btn btn-danger text-align-center block\"\n        disabled={processing || disabled || succeeded}\n        id=\"submit\"\n      >\n        <span id=\"button-text\">\n          {processing ? (\n            <div className={`${payment.spinner}`} id=\"spinner\"></div>\n          ) : (\n            \"Pay now\"\n          )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className=\"text-danger\" role=\"alert\">\n          {error}\n        </div>\n      )}\n      {/* Show a success message upon completion */}\n      {/* <p className={succeeded ? `${payment.resultMessage}` : `${payment.resultMessage} ${payment.hidden}`}>\n        Payment succeeded, see the result in your\n        <a\n          href={`https://dashboard.stripe.com/test/payments`}\n        >\n         \n          Stripe dashboard.\n        </a> Refresh the page to pay again.\n      </p> */}\n    </form>\n  );\n}\n\nexport default CheckoutForm"]},"metadata":{},"sourceType":"module"}