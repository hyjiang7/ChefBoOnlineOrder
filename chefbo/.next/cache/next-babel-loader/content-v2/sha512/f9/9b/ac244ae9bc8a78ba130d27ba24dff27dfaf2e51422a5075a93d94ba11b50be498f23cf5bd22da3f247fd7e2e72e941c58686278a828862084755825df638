{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/cart.js\";\nimport store from \"../../state/GlobalState\";\nimport CartItem from \"../../components/CartItem\";\nimport { deleteFromCart } from \"../../state/Actions\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Button } from \"react-bootstrap\";\n\nconst cart = () => {\n  const {\n    cart\n  } = store.getState();\n  const router = useRouter();\n  const {\n    0: cartTotal,\n    1: setCartTotal\n  } = useState(0); //get total the first time\n\n  useEffect(() => {\n    setCartTotal(temp);\n  }, []); //   useEffect(() => {\n  //       //beacuse whole thing re-renders everytime useEffect runs, my cartTotal gets reset to 0 each time. \n  //     console.log(\"cart has changed!\");\n  //     console.log(store.getState().cart);\n  //     const getTotal = () => {\n  //       store.getState().cart.map((item, index) => {\n  //         console.log(\"total before set\", item.itemTotal, cartTotal)\n  //         const temp = cartTotal + item.itemTotal\n  //         setCartTotal(temp);\n  //         console.log(\"total after set\", cartTotal)\n  //       });\n  //     };\n  //     getTotal();\n  //   }, []);\n\n  const deleteCartItem = index => {\n    store.dispatch(deleteFromCart(index, cart)); // router.push(\"/routes/cart\");\n  };\n\n  if (cart.length == 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \" Cart is empty! Add items to begin order.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [cart.map((item, index) => /*#__PURE__*/_jsxDEV(CartItem, {\n      item: item,\n      index: index,\n      deleteHandle: deleteCartItem\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Button, {\n      children: [\"Checkout $\", cartTotal]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default cart;","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/cart.js"],"names":["store","CartItem","deleteFromCart","React","useState","useContext","useEffect","useRouter","Button","cart","getState","router","cartTotal","setCartTotal","temp","deleteCartItem","index","dispatch","length","map","item"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT,QAAuB,iBAAvB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAGjB,QAAM;AAAEA,IAAAA;AAAF,MAAWT,KAAK,CAACU,QAAN,EAAjB;AACA,QAAMC,MAAM,GAAGJ,SAAS,EAAxB;AACA,QAAM;AAAA,OAACK,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC,CAAD,CAA1C,CALiB,CAOjB;;AAIEE,EAAAA,SAAS,CAAC,MAAK;AACXO,IAAAA,YAAY,CAACC,IAAD,CAAZ;AACH,GAFQ,EAEN,EAFM,CAAT,CAXe,CAenB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEE,QAAMC,cAAc,GAAIC,KAAD,IAAW;AAChChB,IAAAA,KAAK,CAACiB,QAAN,CAAef,cAAc,CAACc,KAAD,EAAQP,IAAR,CAA7B,EADgC,CAEhC;AACD,GAHD;;AAKA,MAAIA,IAAI,CAACS,MAAL,IAAe,CAAnB,EACE,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEF,sBACE;AAAA,eACGT,IAAI,CAACU,GAAL,CAAS,CAACC,IAAD,EAAOJ,KAAP,kBACR,QAAC,QAAD;AAEE,MAAA,IAAI,EAAEI,IAFR;AAGE,MAAA,KAAK,EAAEJ,KAHT;AAIE,MAAA,YAAY,EAAED;AAJhB,OACOC,KADP;AAAA;AAAA;AAAA;AAAA,YADD,CADH,eASE,QAAC,MAAD;AAAA,+BAAmBJ,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA,kBADF;AAaD,CArDD;;AAuDA,eAAeH,IAAf","sourcesContent":["import store from \"../../state/GlobalState\";\nimport CartItem from \"../../components/CartItem\";\nimport { deleteFromCart } from \"../../state/Actions\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Button } from \"react-bootstrap\";\n\nconst cart = () => {\n\n\n  const { cart } = store.getState();\n  const router = useRouter();\n  const [cartTotal, setCartTotal] = useState(0);\n\n  //get total the first time\n\n    \n\n    useEffect(() =>{\n        setCartTotal(temp)\n    }, [])\n\n//   useEffect(() => {\n//       //beacuse whole thing re-renders everytime useEffect runs, my cartTotal gets reset to 0 each time. \n//     console.log(\"cart has changed!\");\n//     console.log(store.getState().cart);\n\n//     const getTotal = () => {\n//       store.getState().cart.map((item, index) => {\n//         console.log(\"total before set\", item.itemTotal, cartTotal)\n//         const temp = cartTotal + item.itemTotal\n//         setCartTotal(temp);\n//         console.log(\"total after set\", cartTotal)\n//       });\n//     };\n\n//     getTotal();\n//   }, []);\n\n  const deleteCartItem = (index) => {\n    store.dispatch(deleteFromCart(index, cart));\n    // router.push(\"/routes/cart\");\n  };\n\n  if (cart.length == 0)\n    return <p> Cart is empty! Add items to begin order.</p>;\n\n  return (\n    <>\n      {cart.map((item, index) => (\n        <CartItem\n          key={index}\n          item={item}\n          index={index}\n          deleteHandle={deleteCartItem}\n        ></CartItem>\n      ))}\n      <Button>Checkout ${cartTotal}</Button>\n    </>\n  );\n};\n\nexport default cart;\n"]},"metadata":{},"sourceType":"module"}