{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/cart.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport store from \"../../state/GlobalState\";\nimport CartItem from \"../../components/CartItem\";\nimport { deleteFromCart } from \"../../state/Actions\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Button } from \"react-bootstrap\";\n\nvar cart = function cart() {\n  _s();\n\n  var _store$getState = store.getState(),\n      Cart = _store$getState.Cart;\n\n  var router = useRouter();\n\n  var _useState = useState(0),\n      cartTotal = _useState[0],\n      setCartTotal = _useState[1]; //get total the first time\n\n\n  var count;\n  useEffect(function () {\n    var temp;\n    Cart.map(function (item, index) {\n      temp += item.itemTotal;\n    });\n    console.log(temp); //setCartTotal(temp)\n\n    console.log(\"useEffect count: \", count++);\n  }, []); //   useEffect(() => {\n  //       //beacuse whole thing re-renders everytime useEffect runs, my cartTotal gets reset to 0 each time. \n  //     console.log(\"cart has changed!\");\n  //     console.log(store.getState().cart);\n  //     const getTotal = () => {\n  //       store.getState().cart.map((item, index) => {\n  //         console.log(\"total before set\", item.itemTotal, cartTotal)\n  //         const temp = cartTotal + item.itemTotal\n  //         setCartTotal(temp);\n  //         console.log(\"total after set\", cartTotal)\n  //       });\n  //     };\n  //     getTotal();\n  //   }, []);\n\n  var deleteCartItem = function deleteCartItem(index) {\n    store.dispatch(deleteFromCart(index, Cart)); // router.push(\"/routes/cart\");\n  };\n\n  if (Cart.length == 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \" Cart is empty! Add items to begin order.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 12\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [Cart.map(function (item, index) {\n      return /*#__PURE__*/_jsxDEV(CartItem, {\n        item: item,\n        index: index,\n        deleteHandle: deleteCartItem\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(Button, {\n      children: [\"Checkout $\", cartTotal]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(cart, \"bVIiEkaeytZdQsxJRNNqQ/w2BiY=\", false, function () {\n  return [useRouter];\n});\n\nexport default cart;","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/cart.js"],"names":["store","CartItem","deleteFromCart","React","useState","useContext","useEffect","useRouter","Button","cart","getState","Cart","router","cartTotal","setCartTotal","count","temp","map","item","index","itemTotal","console","log","deleteCartItem","dispatch","length"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT,QAAuB,iBAAvB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAAA,wBAGAT,KAAK,CAACU,QAAN,EAHA;AAAA,MAGTC,IAHS,mBAGTA,IAHS;;AAIjB,MAAMC,MAAM,GAAGL,SAAS,EAAxB;;AAJiB,kBAKiBH,QAAQ,CAAC,CAAD,CALzB;AAAA,MAKVS,SALU;AAAA,MAKCC,YALD,iBAOjB;;;AAGE,MAAIC,KAAJ;AACAT,EAAAA,SAAS,CAAC,YAAK;AACX,QAAIU,IAAJ;AACAL,IAAAA,IAAI,CAACM,GAAL,CAAS,UAACC,IAAD,EAAMC,KAAN,EAAe;AACpBH,MAAAA,IAAI,IAAIE,IAAI,CAACE,SAAb;AACH,KAFD;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ,EALW,CAKO;;AAClBK,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCP,KAAK,EAAtC;AACH,GAPQ,EAON,EAPM,CAAT,CAXe,CAoBnB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEE,MAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAACJ,KAAD,EAAW;AAChCnB,IAAAA,KAAK,CAACwB,QAAN,CAAetB,cAAc,CAACiB,KAAD,EAAQR,IAAR,CAA7B,EADgC,CAEhC;AACD,GAHD;;AAKA,MAAIA,IAAI,CAACc,MAAL,IAAe,CAAnB,EACE,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAEF,sBACE;AAAA,eACGd,IAAI,CAACM,GAAL,CAAS,UAACC,IAAD,EAAOC,KAAP;AAAA,0BACR,QAAC,QAAD;AAEE,QAAA,IAAI,EAAED,IAFR;AAGE,QAAA,KAAK,EAAEC,KAHT;AAIE,QAAA,YAAY,EAAEI;AAJhB,SACOJ,KADP;AAAA;AAAA;AAAA;AAAA,eADQ;AAAA,KAAT,CADH,eASE,QAAC,MAAD;AAAA,+BAAmBN,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,aATF;AAAA,kBADF;AAaD,CA1DD;;GAAMJ,I;UAIWF,S;;;AAwDjB,eAAeE,IAAf","sourcesContent":["import store from \"../../state/GlobalState\";\nimport CartItem from \"../../components/CartItem\";\nimport { deleteFromCart } from \"../../state/Actions\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Button } from \"react-bootstrap\";\n\nconst cart = () => {\n\n\n  const { Cart } = store.getState();\n  const router = useRouter();\n  const [cartTotal, setCartTotal] = useState(0);\n\n  //get total the first time\n\n    \n    var count;\n    useEffect(() =>{\n        var temp;\n        Cart.map((item,index) =>{\n            temp += item.itemTotal\n        })\n        console.log(temp) //setCartTotal(temp)\n        console.log(\"useEffect count: \", count++)\n    }, [])\n\n//   useEffect(() => {\n//       //beacuse whole thing re-renders everytime useEffect runs, my cartTotal gets reset to 0 each time. \n//     console.log(\"cart has changed!\");\n//     console.log(store.getState().cart);\n\n//     const getTotal = () => {\n//       store.getState().cart.map((item, index) => {\n//         console.log(\"total before set\", item.itemTotal, cartTotal)\n//         const temp = cartTotal + item.itemTotal\n//         setCartTotal(temp);\n//         console.log(\"total after set\", cartTotal)\n//       });\n//     };\n\n//     getTotal();\n//   }, []);\n\n  const deleteCartItem = (index) => {\n    store.dispatch(deleteFromCart(index, Cart));\n    // router.push(\"/routes/cart\");\n  };\n\n  if (Cart.length == 0)\n    return <p> Cart is empty! Add items to begin order.</p>;\n\n  return (\n    <>\n      {Cart.map((item, index) => (\n        <CartItem\n          key={index}\n          item={item}\n          index={index}\n          deleteHandle={deleteCartItem}\n        ></CartItem>\n      ))}\n      <Button>Checkout ${cartTotal}</Button>\n    </>\n  );\n};\n\nexport default cart;\n"]},"metadata":{},"sourceType":"module"}