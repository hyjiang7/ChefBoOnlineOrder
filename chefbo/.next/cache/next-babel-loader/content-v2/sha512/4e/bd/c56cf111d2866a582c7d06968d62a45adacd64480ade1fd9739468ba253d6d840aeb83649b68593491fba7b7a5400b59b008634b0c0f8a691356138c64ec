{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/components/checkoutForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport store from \"../state/GlobalState\";\nimport payment from \"../styles/payment.module.css\";\n\nconst CheckoutForm = ({\n  submit\n}) => {\n  const {\n    0: succeeded,\n    1: setSucceeded\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: processing,\n    1: setProcessing\n  } = useState('');\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(true);\n  const {\n    0: clientSecret,\n    1: setClientSecret\n  } = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n\n  async function getClientSecret() {\n    const res = await fetch(`${process.env.NEXT_PUBLIC_SERVER_DOMAIN}/create-payment-intent`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(store.getState())\n    });\n    const response = await res.json();\n    setClientSecret(response.clientSecret);\n  }\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    getClientSecret();\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  const cardElementStyle = {\n    borderRadius: \"4px\",\n    padding: \"12px\",\n    border: \"2px solid rgba(50, 50, 93, 0.1)\",\n    maxHeight: \"44px\",\n    background: \"white\",\n    boxSizing: \"border-box\"\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      receipt_email: store.getState().customer.email,\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    console.log(payload);\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n      submit();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"ml-2 mr-2 form-group text-center\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-left pb-2\",\n      children: \"Enter payment information:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      style: cardElementStyle,\n      children: /*#__PURE__*/_jsxDEV(CardElement, {\n        options: cardStyle,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-danger text-align-center block\",\n      disabled: processing || disabled || succeeded,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${payment.spinner}`,\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-danger\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/components/checkoutForm.js"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","store","payment","CheckoutForm","submit","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","getClientSecret","res","fetch","process","env","NEXT_PUBLIC_SERVER_DOMAIN","method","headers","body","JSON","stringify","getState","response","json","cardStyle","style","base","color","fontFamily","fontSmoothing","invalid","iconColor","cardElementStyle","borderRadius","padding","border","maxHeight","background","boxSizing","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","receipt_email","customer","email","payment_method","card","getElement","console","log","spinner"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport store from \"../state/GlobalState\";\nimport payment from \"../styles/payment.module.css\";\n\n\n\n\nconst CheckoutForm = ({submit}) =>{\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n\n\n  async function getClientSecret()\n    {\n        const res = await fetch(`${process.env.NEXT_PUBLIC_SERVER_DOMAIN}/create-payment-intent`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(store.getState())\n        });\n        const response = await res.json();\n        setClientSecret(response.clientSecret)\n    }\n\n\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    getClientSecret()\n  }, []);\n\n\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        },\n \n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const cardElementStyle = {\n    borderRadius: \"4px\",\n    padding: \"12px\",\n    border: \"2px solid rgba(50, 50, 93, 0.1)\",\n    maxHeight: \"44px\",\n    background: \"white\",\n    boxSizing: \"border-box\"\n  }\n\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      receipt_email: store.getState().customer.email,\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    console.log(payload)\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n      submit();\n    }\n  };\n\n  return (\n    <form className=\"ml-2 mr-2 form-group text-center\" onSubmit={handleSubmit}>\n\n    <div className=\"text-left pb-2\">Enter payment information:</div>\n    <div className=\"form-group\" style={cardElementStyle}>\n        <CardElement  options={cardStyle} onChange={handleChange} />\n    </div>\n      <button\n        className=\"btn btn-danger text-align-center block\"\n        disabled={processing || disabled || succeeded}\n        id=\"submit\"\n      >\n        <span id=\"button-text\">\n          {processing ? (\n            <div className={`${payment.spinner}`} id=\"spinner\"></div>\n          ) : (\n            \"Pay now\"\n          )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className=\"text-danger\" role=\"alert\">\n          {error}\n        </div>\n      )}\n    </form>\n  );\n}\n\nexport default CheckoutForm\n"]},"metadata":{},"sourceType":"module"}