{"ast":null,"code":"import { createContext, useReducer, useEffect, useContext } from 'react';\nimport reducers from './Reducers';\nimport { createStore } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport AsyncStorage from 'react-native'; //   const StoreContext = createContext();\n//   const GlobalStore = (props) => {\n//     const initialState = { \n//         cart: []\n//     };\n//     const {load, ...rest} = props;\n//     const [state, dispatch] = useReducer(reducers, initialState);    //using combine reducers alike\n//     console.log(state)\n//     console.log(dispatch)\n//     const cart = state;\n//     return(\n//         <StoreContext.Provider value={{state, dispatch}} {...rest}/> \n//     );\n// };\n// export const useStore = () => useContext(StoreContext);  //custom hook useStore\n// export default GlobalStore;\n\nvar sampleItem = {\n  item: {\n    Name: \"Food\",\n    Price: 13\n  },\n  mods: [{\n    Name: \"Mod\",\n    Price: 1\n  }],\n  itemTotal: 14\n};\nvar persistConfig = {\n  key: 'root',\n  storage: AsyncStorage\n};\nvar initialState = {\n  Cart: [],\n  user: \"customer\"\n}; // const store = createStore(reducers, initialState)\n\nvar store = createStore(persistReducer(persistConfig, reducers), initialState);\nexport default store;","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/state/GlobalState.js"],"names":["createContext","useReducer","useEffect","useContext","reducers","createStore","persistStore","persistReducer","storage","AsyncStorage","sampleItem","item","Name","Price","mods","itemTotal","persistConfig","key","initialState","Cart","user","store"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,UAA/C,QAAiE,OAAjE;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,WAAT,QAA2B,OAA3B;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,YAAP,MAAyB,cAAzB,C,CACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;;AAGA,IAAMC,UAAU,GAAG;AACfC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,MADJ;AAEFC,IAAAA,KAAK,EAAE;AAFL,GADS;AAKfC,EAAAA,IAAI,EAAE,CACF;AACIF,IAAAA,IAAI,EAAE,KADV;AAEIC,IAAAA,KAAK,EAAE;AAFX,GADE,CALS;AAWfE,EAAAA,SAAS,EAAE;AAXI,CAAnB;AAaA,IAAMC,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBT,EAAAA,OAAO,EAAEC;AAFS,CAAtB;AAIA,IAAMS,YAAY,GAAG;AAAEC,EAAAA,IAAI,EAAE,EAAR;AAAYC,EAAAA,IAAI,EAAE;AAAlB,CAArB,C,CACA;;AACA,IAAMC,KAAK,GAAGhB,WAAW,CACrBE,cAAc,CAACS,aAAD,EAAgBZ,QAAhB,CADO,EAErBc,YAFqB,CAAzB;AAKA,eAAeG,KAAf","sourcesContent":["import { createContext, useReducer, useEffect, useContext } from 'react'\nimport reducers from './Reducers'\nimport { createStore} from 'redux'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport AsyncStorage from 'react-native'\n//   const StoreContext = createContext();\n\n\n//   const GlobalStore = (props) => {\n//     const initialState = { \n//         cart: []\n//     };\n//     const {load, ...rest} = props;\n\n//     const [state, dispatch] = useReducer(reducers, initialState);    //using combine reducers alike\n//     console.log(state)\n//     console.log(dispatch)\n//     const cart = state;\n\n\n//     return(\n//         <StoreContext.Provider value={{state, dispatch}} {...rest}/> \n//     );\n// };\n\n// export const useStore = () => useContext(StoreContext);  //custom hook useStore\n// export default GlobalStore;\n\n\nconst sampleItem = {\n    item: {\n        Name: \"Food\",\n        Price: 13\n    },\n    mods: [\n        {\n            Name: \"Mod\",\n            Price: 1\n        }\n    ],\n    itemTotal: 14\n};\nconst persistConfig = {\n    key: 'root',\n    storage: AsyncStorage\n  }\nconst initialState = { Cart: [], user: \"customer\"};\n// const store = createStore(reducers, initialState)\nconst store = createStore(\n    persistReducer(persistConfig, reducers),\n    initialState,\n   );\n\nexport default store;"]},"metadata":{},"sourceType":"module"}