{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/components/checkoutForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport store from \"../state/GlobalState\";\nimport payment from \"../styles/payment.module.css\";\n\nconst CheckoutForm = (secret, submit) => {\n  const {\n    0: succeeded,\n    1: setSucceeded\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: processing,\n    1: setProcessing\n  } = useState('');\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(true);\n  const {\n    0: clientSecret,\n    1: setClientSecret\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const stripe = useStripe();\n  const elements = useElements(); //   async function getClientSecret()\n  //     {\n  //         const res = await fetch(`http://localhost:5001/create-payment-intent`, {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Accept': 'application/json',\n  //                 'Content-Type': 'application/json'\n  //             },\n  //             body: JSON.stringify(store.getState())\n  //         });\n  //         const response = await res.json();\n  //         setClientSecret(response.clientSecret)\n  //     }\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    setClientSecret(secret);\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      receipt_email: email,\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-group d-flex justify-content-center \",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: email,\n      onChange: e => setEmail(e.target.value),\n      placeholder: \"Enter email address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {\n      options: cardStyle,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-danger text-align-center\",\n      disabled: processing || disabled || succeeded,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${payment.cardError}`,\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: succeeded ? `${payment.resultMessage}` : `${payment.resultMessage} ${payment.hidden}`,\n      children: [\"Payment succeeded, see the result in your\", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://dashboard.stripe.com/test/payments`,\n        children: \"Stripe dashboard.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), \" Refresh the page to pay again.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/components/checkoutForm.js"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","store","payment","CheckoutForm","secret","submit","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","email","setEmail","stripe","elements","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","receipt_email","payment_method","card","getElement","e","target","value","cardError","resultMessage","hidden"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport store from \"../state/GlobalState\";\nimport payment from \"../styles/payment.module.css\";\n\n\n\nconst CheckoutForm = (secret, submit) =>{\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const [email, setEmail] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n\n\n//   async function getClientSecret()\n//     {\n//         const res = await fetch(`http://localhost:5001/create-payment-intent`, {\n//             method: 'POST',\n//             headers: {\n//                 'Accept': 'application/json',\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify(store.getState())\n//         });\n//         const response = await res.json();\n//         setClientSecret(response.clientSecret)\n//     }\n\n\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    setClientSecret(secret)\n  }, []);\n\n\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      receipt_email: email,\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  return (\n    <form className=\"form-group d-flex justify-content-center \" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Enter email address\"\n      />\n      <CardElement  options={cardStyle} onChange={handleChange} />\n      <button\n      className=\"btn btn-danger text-align-center\"\n        disabled={processing || disabled || succeeded}\n        id=\"submit\"\n      >\n        <span id=\"button-text\">\n          {processing ? (\n            <div className=\"spinner\" id=\"spinner\"></div>\n          ) : (\n            \"Pay now\"\n          )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className={`${payment.cardError}`} role=\"alert\">\n          {error}\n        </div>\n      )}\n      {/* Show a success message upon completion */}\n      <p className={succeeded ? `${payment.resultMessage}` : `${payment.resultMessage} ${payment.hidden}`}>\n        Payment succeeded, see the result in your\n        <a\n          href={`https://dashboard.stripe.com/test/payments`}\n        >\n         \n          Stripe dashboard.\n        </a> Refresh the page to pay again.\n      </p>\n    </form>\n  );\n}\n\nexport default CheckoutForm"]},"metadata":{},"sourceType":"module"}