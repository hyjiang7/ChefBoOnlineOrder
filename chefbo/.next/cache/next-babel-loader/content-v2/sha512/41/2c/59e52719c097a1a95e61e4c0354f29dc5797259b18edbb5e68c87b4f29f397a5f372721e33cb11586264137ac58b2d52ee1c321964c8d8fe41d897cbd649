{"ast":null,"code":"import { createContext, useReducer, useEffect, useContext } from 'react';\nimport reducers from './Reducers';\nimport { createStore } from 'redux'; //   const StoreContext = createContext();\n//   const GlobalStore = (props) => {\n//     const initialState = { \n//         cart: []\n//     };\n//     const {load, ...rest} = props;\n//     const [state, dispatch] = useReducer(reducers, initialState);    //using combine reducers alike\n//     console.log(state)\n//     console.log(dispatch)\n//     const cart = state;\n//     return(\n//         <StoreContext.Provider value={{state, dispatch}} {...rest}/> \n//     );\n// };\n// export const useStore = () => useContext(StoreContext);  //custom hook useStore\n// export default GlobalStore;\n\nconst initialState = {\n  cart: [],\n  user: \"customer\"\n}; // const store = createStore(reducers, initialState)\n\nconst store = createStore(persistReducer(persistConfig, reducers), initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/state/GlobalState.js"],"names":["createContext","useReducer","useEffect","useContext","reducers","createStore","initialState","cart","user","store","persistReducer","persistConfig","composeWithDevTools","applyMiddleware","middleware"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,UAA/C,QAAiE,OAAjE;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,WAAT,QAA2B,OAA3B,C,CAGA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;;AAGA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,IAAI,EAAE,EAAR;AAAYC,EAAAA,IAAI,EAAE;AAAlB,CAArB,C,CACA;;AACA,MAAMC,KAAK,GAAGJ,WAAW,CACrBK,cAAc,CAACC,aAAD,EAAgBP,QAAhB,CADO,EAErBE,YAFqB,EAGrBM,mBAAmB,CAACC,eAAe,CAAC,GAAGC,UAAJ,CAAhB,CAHE,CAAzB;AAKA,eAAeL,KAAf","sourcesContent":["import { createContext, useReducer, useEffect, useContext } from 'react'\nimport reducers from './Reducers'\nimport { createStore} from 'redux'\n\n\n//   const StoreContext = createContext();\n\n\n//   const GlobalStore = (props) => {\n//     const initialState = { \n//         cart: []\n//     };\n//     const {load, ...rest} = props;\n\n//     const [state, dispatch] = useReducer(reducers, initialState);    //using combine reducers alike\n//     console.log(state)\n//     console.log(dispatch)\n//     const cart = state;\n\n\n//     return(\n//         <StoreContext.Provider value={{state, dispatch}} {...rest}/> \n//     );\n// };\n\n// export const useStore = () => useContext(StoreContext);  //custom hook useStore\n// export default GlobalStore;\n\n\nconst initialState = { cart: [], user: \"customer\"};\n// const store = createStore(reducers, initialState)\nconst store = createStore(\n    persistReducer(persistConfig, reducers),\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware)));\n\nexport default store;"]},"metadata":{},"sourceType":"module"}