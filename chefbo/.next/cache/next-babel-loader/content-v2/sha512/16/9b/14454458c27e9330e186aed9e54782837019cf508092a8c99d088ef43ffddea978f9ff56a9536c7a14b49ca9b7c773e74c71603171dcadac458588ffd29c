{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/cart.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport store from \"../../state/GlobalState\";\nimport CartItem from \"../../components/CartItem\";\nimport { deleteFromCart } from \"../../state/Actions\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Button } from \"react-bootstrap\";\n\nvar cart = function cart() {\n  _s();\n\n  var _store$getState = store.getState(),\n      cart = _store$getState.cart;\n\n  var router = useRouter();\n\n  var _useState = useState(0),\n      cartTotal = _useState[0],\n      setCartTotal = _useState[1]; //get total the first time\n\n\n  cart.map(function (item, index) {\n    var temp = cartTotal + item.itemTotal;\n    setCartTotal(temp);\n  });\n  useEffect(function () {\n    //beacuse whole thing re-renders everytime useEffect runs, my cartTotal gets reset to 0 each time. \n    console.log(\"cart has changed!\");\n    console.log(store.getState().cart);\n\n    var getTotal = function getTotal() {\n      store.getState().cart.map(function (item, index) {\n        console.log(\"total before set\", item.itemTotal, cartTotal);\n        var temp = cartTotal + item.itemTotal;\n        setCartTotal(temp);\n        console.log(\"total after set\", cartTotal);\n      });\n    };\n\n    getTotal();\n  }, []);\n\n  var deleteCartItem = function deleteCartItem(index) {\n    store.dispatch(deleteFromCart(index, cart)); // router.push(\"/routes/cart\");\n  };\n\n  if (cart.length == 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \" Cart is empty! Add items to begin order.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [cart.map(function (item, index) {\n      return /*#__PURE__*/_jsxDEV(CartItem, {\n        item: item,\n        index: index,\n        deleteHandle: deleteCartItem\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(Button, {\n      children: [\"Checkout $\", cartTotal]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(cart, \"bVIiEkaeytZdQsxJRNNqQ/w2BiY=\", false, function () {\n  return [useRouter];\n});\n\nexport default cart;","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/cart.js"],"names":["store","CartItem","deleteFromCart","React","useState","useContext","useEffect","useRouter","Button","cart","getState","router","cartTotal","setCartTotal","map","item","index","temp","itemTotal","console","log","getTotal","deleteCartItem","dispatch","length"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT,QAAuB,iBAAvB;;AAEA,IAAMC,IAAI,GAAG,gBAAM;AAAA;;AAAA,wBAGAT,KAAK,CAACU,QAAN,EAHA;AAAA,MAGTD,IAHS,mBAGTA,IAHS;;AAIjB,MAAME,MAAM,GAAGJ,SAAS,EAAxB;;AAJiB,kBAKiBH,QAAQ,CAAC,CAAD,CALzB;AAAA,MAKVQ,SALU;AAAA,MAKCC,YALD,iBAOjB;;;AACEJ,EAAAA,IAAI,CAACK,GAAL,CAAS,UAACC,IAAD,EAAMC,KAAN,EAAe;AACpB,QAAMC,IAAI,GAAGL,SAAS,GAAGG,IAAI,CAACG,SAA9B;AACAL,IAAAA,YAAY,CAACI,IAAD,CAAZ;AACH,GAHD;AAKFX,EAAAA,SAAS,CAAC,YAAM;AACZ;AACFa,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYpB,KAAK,CAACU,QAAN,GAAiBD,IAA7B;;AAEA,QAAMY,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBrB,MAAAA,KAAK,CAACU,QAAN,GAAiBD,IAAjB,CAAsBK,GAAtB,CAA0B,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACzCG,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCL,IAAI,CAACG,SAArC,EAAgDN,SAAhD;AACA,YAAMK,IAAI,GAAGL,SAAS,GAAGG,IAAI,CAACG,SAA9B;AACAL,QAAAA,YAAY,CAACI,IAAD,CAAZ;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BR,SAA/B;AACD,OALD;AAMD,KAPD;;AASAS,IAAAA,QAAQ;AACT,GAfQ,EAeN,EAfM,CAAT;;AAiBA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACN,KAAD,EAAW;AAChChB,IAAAA,KAAK,CAACuB,QAAN,CAAerB,cAAc,CAACc,KAAD,EAAQP,IAAR,CAA7B,EADgC,CAEhC;AACD,GAHD;;AAKA,MAAIA,IAAI,CAACe,MAAL,IAAe,CAAnB,EACE,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAEF,sBACE;AAAA,eACGf,IAAI,CAACK,GAAL,CAAS,UAACC,IAAD,EAAOC,KAAP;AAAA,0BACR,QAAC,QAAD;AAEE,QAAA,IAAI,EAAED,IAFR;AAGE,QAAA,KAAK,EAAEC,KAHT;AAIE,QAAA,YAAY,EAAEM;AAJhB,SACON,KADP;AAAA;AAAA;AAAA;AAAA,eADQ;AAAA,KAAT,CADH,eASE,QAAC,MAAD;AAAA,+BAAmBJ,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,aATF;AAAA,kBADF;AAaD,CAnDD;;GAAMH,I;UAIWF,S;;;AAiDjB,eAAeE,IAAf","sourcesContent":["import store from \"../../state/GlobalState\";\nimport CartItem from \"../../components/CartItem\";\nimport { deleteFromCart } from \"../../state/Actions\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Button } from \"react-bootstrap\";\n\nconst cart = () => {\n\n\n  const { cart } = store.getState();\n  const router = useRouter();\n  const [cartTotal, setCartTotal] = useState(0);\n\n  //get total the first time\n    cart.map((item,index) =>{\n        const temp = cartTotal + item.itemTotal\n        setCartTotal(temp)\n    })\n\n  useEffect(() => {\n      //beacuse whole thing re-renders everytime useEffect runs, my cartTotal gets reset to 0 each time. \n    console.log(\"cart has changed!\");\n    console.log(store.getState().cart);\n\n    const getTotal = () => {\n      store.getState().cart.map((item, index) => {\n        console.log(\"total before set\", item.itemTotal, cartTotal)\n        const temp = cartTotal + item.itemTotal\n        setCartTotal(temp);\n        console.log(\"total after set\", cartTotal)\n      });\n    };\n\n    getTotal();\n  }, []);\n\n  const deleteCartItem = (index) => {\n    store.dispatch(deleteFromCart(index, cart));\n    // router.push(\"/routes/cart\");\n  };\n\n  if (cart.length == 0)\n    return <p> Cart is empty! Add items to begin order.</p>;\n\n  return (\n    <>\n      {cart.map((item, index) => (\n        <CartItem\n          key={index}\n          item={item}\n          index={index}\n          deleteHandle={deleteCartItem}\n        ></CartItem>\n      ))}\n      <Button>Checkout ${cartTotal}</Button>\n    </>\n  );\n};\n\nexport default cart;\n"]},"metadata":{},"sourceType":"module"}