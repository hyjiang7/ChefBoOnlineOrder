{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _readOnlyError from \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\n\nvar _jsxFileName = \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/checkout.js\",\n    _this = this;\n\nimport moment from \"moment\";\nimport React from \"react\";\n\nvar checkout = function checkout() {\n  //select time tag: 15 min increments until close\n  //create all valid pickup times\n  var validTimes = [\"11:15\", \"11:30\", \"11:45\", \"12:00\", \"12:15\", \"12:30\", \"12:45\", \"13:00\", \"13:15\", \"13:30\", \"13:45\", \"14:00\", \"14:15\", \"14:30\", \"14:45\", \"16:45\", \"17:00\", \"17:15\", \"17:45\", \"18:00\", \"18:15\", \"18:30\", \"18:45\", \"19:00\", \"19:15\", \"19:30\", \"19:45\", \"20:00\", \"20:15\", \"20:30\", \"20:45\"]; // var currentValidTimes;\n\n  var hoursOfOperation = [[], [\"11:15\", \"2:45\", \"16:45\", \"20:30\"], [\"11:15\", \"2:45\", \"16:45\", \"20:30\"], [\"11:15\", \"2:45\", \"16:45\", \"20:30\"], [\"11:15\", \"2:45\", \"16:45\", \"20:30\"], [\"11:15\", \"2:45\", \"16:45\", \"21:00\"], [\"11:15\", \"2:45\", \"16:45\", \"21:00\"]];\n  var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  var closed = true; // const today = new Date()\n  // const currentTime = today.getHours() + \":\" + today.getMinutes();\n  // const sunday =  today.getDay() == 0;\n  // const closed = currentTime > \"20:45\" || sunday;\n  // const saturday = today.getDay() == 6; //returns 6\n  // var pickupDate , pickupDay;\n  // var nextBusinessDay;\n  // if(closed)\n  // {\n  //     var daysToSkip;\n  //     saturday? daysToSkip = 2 : daysToSkip = 1;\n  //     pickupDate = new Date(today.getTime() + (daysToSkip*86400000));\n  //     pickupDay = days[pickupDate.getDay()]\n  //     console.log(\"store closed, pickup will be for when we open for business on \", pickupDay, pickupDate.getMonth() +1, \"/\" ,pickupDate.getDate(),  \"/\" , pickupDate.getFullYear())\n  //     //if today is sat, then we open on monday\n  //     nextBusinessDay = `${pickupDay} ${pickupDate.getMonth() +1}/${pickupDate.getDate()}/${pickupDate.getFullYear()}`;\n  //     validTimes.splice(0,1);\n  // }\n  // else {\n  //     var index;\n  //     console.log(typeof(currentTime))\n  //     console.log(new Date(currentTime) < new Date('11:34'))\n  //     validTimes.every( (i, ind) => {\n  //         if(currentTime > i)\n  //         {\n  //             index = ind\n  //             return false;\n  //         }\n  //         return true;\n  //     })\n  //     console.log(index)\n  //     validTimes.splice(0, index + 1);\n  // }\n\n  var today = moment.utc(moment().format(\"MM-DD-YY HH:mm\")).utcOffset(\"PST\");\n  var day = today.day(); //number\n\n  var dayStr = today.format(\"dddd\"); //friday\n\n  var currTime = today.format(\"HH:mm\"); //string\n\n  var date = today.format(\"MM-DD-YY\"); //string\n\n  var validDays = [];\n  var validTimesToday = [];\n  console.log(\"\".concat(hoursOfOperation[day].slice(-1))); //today is open! \n\n  if (today.isBefore(\"\".concat(date, \" \").concat(hoursOfOperation[day].slice(-1)))) {\n    console.log(\"open\");\n    validDays.push(\"Today (\".concat(date, \")\"));\n\n    if (day == 6) {\n      //if today is sat, give them today and monday\n      validDays.push(\"Monday (\".concat(today.add(2, \"days\").format(\"MM-DD-YY\"), \")\"));\n    } else {\n      //today and tmr\n      validDays.push(\"Tomorrow (\".concat(today.add(1, \"days\").format(\"MM-DD-YY\"), \")\"));\n    }\n\n    today = moment.utc(moment().format(\"MM-DD-YY HH:mm\")).utcOffset(\"PST\"); //reset today\n\n    validTimesToday = (_readOnlyError(\"validTimesToday\"), availablePickUpTimes(today, \"\".concat(date, \" 14:45\")));\n    validTimesToday.concat(availablePickUpTimes(new moment(\"\".concat(date, \" 14:15\")), \"\".concat(date, \" 21:00\")));\n  } else {\n    console.log(\"closed today\"); //give them options for next two business days\n\n    validDays.push(\"Tomorrow (\".concat(today.add(1, \"days\").format(\"MM-DD-YY\"), \")\"));\n    validDays.push(\"Monday (\".concat(today.add(2, \"days\").format(\"MM-DD-YY\"), \")\"));\n  }\n\n  function availablePickUpTimes(startTime, endTime) {\n    var times = [];\n    var firstTime = startTime.add(15 - startTime.minute() % 15, \"m\");\n    console.log(firstTime);\n    firstTime.add(15, \"m\");\n\n    while (firstTime.isBefore(endTime)) {\n      times.push(new moment(startTime).format(\"HH:mm\"));\n      firstTime.add(\"m\", 15);\n    }\n\n    return times;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-12 col-sm-8 col-lg-6 m-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          htmlFor: \"time\",\n          children: [\" \", \"Select Pick Up Date\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"day\",\n          className: \"form-control\",\n          children: validDays.map(function (i, ind) {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: i,\n              children: i\n            }, ind, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          htmlFor: \"time\",\n          children: [\" \", \"Select Pick Up Date\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"day\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"time\",\n          className: \"form-control\",\n          children: validTimes.map(function (i, ind) {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\".concat(i),\n              children: i\n            }, ind, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"fname\",\n            children: \" First Name* \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"fname\",\n            type: \"text\",\n            className: \"form-control\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"lname\",\n            children: \" Last Name* \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"lname\",\n            type: \"text\",\n            className: \"form-control\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \" Email* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"email\",\n          type: \"email\",\n          className: \"form-control\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"phone\",\n          children: \" Phone number (digits only)* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"phone\",\n          type: \"tel\",\n          pattern: \"[0-9]{3}[0-9]{3}[0-9]{4}\",\n          className: \"form-control\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group d-flex justify-content-center \",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          children: \"Review and Submit Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, _this);\n};\n\nexport default checkout;","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/checkout.js"],"names":["moment","React","checkout","validTimes","hoursOfOperation","days","closed","today","utc","format","utcOffset","day","dayStr","currTime","date","validDays","validTimesToday","console","log","slice","isBefore","push","add","availablePickUpTimes","concat","startTime","endTime","times","firstTime","minute","map","i","ind"],"mappings":"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","sourcesContent":["import moment from \"moment\";\nimport React from \"react\";\n\nconst checkout = () => {\n  //select time tag: 15 min increments until close\n\n  //create all valid pickup times\n  const validTimes = [\n    \"11:15\",\n    \"11:30\",\n    \"11:45\",\n    \"12:00\",\n    \"12:15\",\n    \"12:30\",\n    \"12:45\",\n    \"13:00\",\n    \"13:15\",\n    \"13:30\",\n    \"13:45\",\n    \"14:00\",\n    \"14:15\",\n    \"14:30\",\n    \"14:45\",\n    \"16:45\",\n    \"17:00\",\n    \"17:15\",\n    \"17:45\",\n    \"18:00\",\n    \"18:15\",\n    \"18:30\",\n    \"18:45\",\n    \"19:00\",\n    \"19:15\",\n    \"19:30\",\n    \"19:45\",\n    \"20:00\",\n    \"20:15\",\n    \"20:30\",\n    \"20:45\",\n  ];\n\n  // var currentValidTimes;\n\n  const hoursOfOperation = [\n    [],\n    [\"11:15\", \"2:45\", \"16:45\", \"20:30\"],\n    [\"11:15\", \"2:45\", \"16:45\", \"20:30\"],\n    [\"11:15\", \"2:45\", \"16:45\", \"20:30\"],\n    [\"11:15\", \"2:45\", \"16:45\", \"20:30\"],\n    [\"11:15\", \"2:45\", \"16:45\", \"21:00\"],\n    [\"11:15\", \"2:45\", \"16:45\", \"21:00\"],\n  ];\n\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  const closed = true;\n\n  // const today = new Date()\n  // const currentTime = today.getHours() + \":\" + today.getMinutes();\n  // const sunday =  today.getDay() == 0;\n  // const closed = currentTime > \"20:45\" || sunday;\n  // const saturday = today.getDay() == 6; //returns 6\n  // var pickupDate , pickupDay;\n  // var nextBusinessDay;\n\n  // if(closed)\n  // {\n\n  //     var daysToSkip;\n  //     saturday? daysToSkip = 2 : daysToSkip = 1;\n  //     pickupDate = new Date(today.getTime() + (daysToSkip*86400000));\n  //     pickupDay = days[pickupDate.getDay()]\n\n  //     console.log(\"store closed, pickup will be for when we open for business on \", pickupDay, pickupDate.getMonth() +1, \"/\" ,pickupDate.getDate(),  \"/\" , pickupDate.getFullYear())\n  //     //if today is sat, then we open on monday\n  //     nextBusinessDay = `${pickupDay} ${pickupDate.getMonth() +1}/${pickupDate.getDate()}/${pickupDate.getFullYear()}`;\n  //     validTimes.splice(0,1);\n  // }\n  // else {\n  //     var index;\n  //     console.log(typeof(currentTime))\n  //     console.log(new Date(currentTime) < new Date('11:34'))\n  //     validTimes.every( (i, ind) => {\n  //         if(currentTime > i)\n  //         {\n  //             index = ind\n  //             return false;\n  //         }\n\n  //         return true;\n  //     })\n\n  //     console.log(index)\n\n  //     validTimes.splice(0, index + 1);\n  // }\n\n  var today = moment.utc(moment().format(\"MM-DD-YY HH:mm\")).utcOffset(\"PST\");\n  const day = today.day(); //number\n  const dayStr = today.format(\"dddd\"); //friday\n  const currTime = today.format(\"HH:mm\"); //string\n  const date = today.format(\"MM-DD-YY\"); //string\n  \n  var validDays = [];\n  const validTimesToday = [];\n\n  console.log(`${hoursOfOperation[day].slice(-1)}`);\n  \n  //today is open! \n  if (today.isBefore(`${date} ${hoursOfOperation[day].slice(-1)}`)) {\n    console.log(\"open\");\n    validDays.push(`Today (${date})`);\n\n    if (day == 6) {\n      //if today is sat, give them today and monday\n      validDays.push(`Monday (${today.add(2, \"days\").format(\"MM-DD-YY\")})`);\n    } else {\n      //today and tmr\n      validDays.push(`Tomorrow (${today.add(1, \"days\").format(\"MM-DD-YY\")})`);\n    }\n\n    today = moment.utc(moment().format(\"MM-DD-YY HH:mm\")).utcOffset(\"PST\"); //reset today\n    validTimesToday = availablePickUpTimes(today, `${date} 14:45`);\n    validTimesToday.concat(availablePickUpTimes(new moment(`${date} 14:15`), `${date} 21:00`))\n\n  } else {\n    console.log(\"closed today\");\n    //give them options for next two business days\n    validDays.push(`Tomorrow (${today.add(1, \"days\").format(\"MM-DD-YY\")})`);\n    validDays.push(`Monday (${today.add(2, \"days\").format(\"MM-DD-YY\")})`);\n  }\n\n  function availablePickUpTimes(startTime, endTime) {\n    var times = [];\n    var firstTime = startTime.add(15 - (startTime.minute() % 15), \"m\");\n\n    console.log(firstTime);\n    firstTime.add(15, \"m\");\n\n    while (firstTime.isBefore(endTime)) {\n      times.push(new moment(startTime).format(\"HH:mm\"));\n      firstTime.add(\"m\", 15);\n    }\n\n    return times;\n  }\n\n\n  return (\n    <div className=\"col-12 col-sm-8 col-lg-6 m-auto\">\n      {/* {closed? <p style={{color: \"red\", fontWeight: \"bold\"}}> Store Closed! Pick up will be scheduled for {nextBusinessDay}!</p> : <p></p>} */}\n      <form className=\"form\">\n        <div className=\"form-group\">\n          <label className=\"\" htmlFor=\"time\">\n            {\" \"}\n            Select Pick Up Date{\" \"}\n          </label>\n          <select name=\"day\" className=\"form-control\">\n            {validDays.map((i, ind) => (\n              <option key={ind} value={i}>\n                {i}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label className=\"\" htmlFor=\"time\">\n            {\" \"}\n            Select Pick Up Date{\" \"}\n          </label>\n          <select name=\"day\" className=\"form-control\"></select>\n          <select name=\"time\" className=\"form-control\">\n            {validTimes.map((i, ind) => (\n              <option key={ind} value={`${i}`}>\n                {i}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col mb-2\">\n            <label htmlFor=\"fname\"> First Name* </label>\n            <input name=\"fname\" type=\"text\" className=\"form-control\" required />\n          </div>\n\n          <div className=\"col\">\n            <label htmlFor=\"lname\"> Last Name* </label>\n            <input name=\"lname\" type=\"text\" className=\"form-control\" required />\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"email\"> Email* </label>\n          <input name=\"email\" type=\"email\" className=\"form-control\" required />\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"phone\"> Phone number (digits only)* </label>\n          <input\n            name=\"phone\"\n            type=\"tel\"\n            pattern=\"[0-9]{3}[0-9]{3}[0-9]{4}\"\n            className=\"form-control\"\n            required\n          />\n        </div>\n\n        <div className=\"form-group d-flex justify-content-center \">\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Review and Submit Order\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default checkout;\n"]},"metadata":{},"sourceType":"module"}