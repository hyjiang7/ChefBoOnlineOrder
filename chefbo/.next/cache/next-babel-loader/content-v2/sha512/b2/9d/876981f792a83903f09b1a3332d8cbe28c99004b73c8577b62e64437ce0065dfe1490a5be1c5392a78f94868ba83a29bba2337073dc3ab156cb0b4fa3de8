{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/checkout.js\";\nimport moment from \"moment\";\nimport React from \"react\";\n\nconst checkout = () => {\n  //select time tag: 15 min increments until close\n  //create all valid pickup times\n  const validTimes = [\"11:15\", \"11:30\", \"11:45\", \"12:00\", \"12:15\", \"12:30\", \"12:45\", \"13:00\", \"13:15\", \"13:30\", \"13:45\", \"14:00\", \"14:15\", \"14:30\", \"14:45\", \"16:45\", \"17:00\", \"17:15\", \"17:45\", \"18:00\", \"18:15\", \"18:30\", \"18:45\", \"19:00\", \"19:15\", \"19:30\", \"19:45\", \"20:00\", \"20:15\", \"20:30\", \"20:45\"]; // var currentValidTimes;\n\n  const hoursOfOperation = [[], [\"11:15\", \"14:45\", \"16:45\", \"20:30\"], [\"11:15\", \"14:45\", \"16:45\", \"20:30\"], [\"11:15\", \"14:45\", \"16:45\", \"20:30\"], [\"11:15\", \"14:45\", \"16:45\", \"20:30\"], [\"11:15\", \"14:45\", \"16:45\", \"21:00\"], [\"12:15\", \"14:45\", \"16:45\", \"21:00\"]];\n  const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  const closed = true; // const today = new Date()\n  // const currentTime = today.getHours() + \":\" + today.getMinutes();\n  // const sunday =  today.getDay() == 0;\n  // const closed = currentTime > \"20:45\" || sunday;\n  // const saturday = today.getDay() == 6; //returns 6\n  // var pickupDate , pickupDay;\n  // var nextBusinessDay;\n  // if(closed)\n  // {\n  //     var daysToSkip;\n  //     saturday? daysToSkip = 2 : daysToSkip = 1;\n  //     pickupDate = new Date(today.getTime() + (daysToSkip*86400000));\n  //     pickupDay = days[pickupDate.getDay()]\n  //     console.log(\"store closed, pickup will be for when we open for business on \", pickupDay, pickupDate.getMonth() +1, \"/\" ,pickupDate.getDate(),  \"/\" , pickupDate.getFullYear())\n  //     //if today is sat, then we open on monday\n  //     nextBusinessDay = `${pickupDay} ${pickupDate.getMonth() +1}/${pickupDate.getDate()}/${pickupDate.getFullYear()}`;\n  //     validTimes.splice(0,1);\n  // }\n  // else {\n  //     var index;\n  //     console.log(typeof(currentTime))\n  //     console.log(new Date(currentTime) < new Date('11:34'))\n  //     validTimes.every( (i, ind) => {\n  //         if(currentTime > i)\n  //         {\n  //             index = ind\n  //             return false;\n  //         }\n  //         return true;\n  //     })\n  //     console.log(index)\n  //     validTimes.splice(0, index + 1);\n  // }\n\n  var today = moment.utc(moment().format(\"MM-DD-YY HH:mm\")).utcOffset(\"PST\");\n  const day = today.day(); //number\n\n  const dayStr = today.format(\"dddd\"); //friday\n\n  const currTime = today.format(\"HH:mm\"); //string\n\n  const date = today.format(\"MM-DD-YY\"); //string\n\n  const open = today.isBefore(`${date} ${hoursOfOperation[day].slice(-1)}`);\n  var validTimesOne = [];\n  var validDays = [];\n  var validTimesTwo = [];\n  var dayTwo; //today is open!\n\n  if (open) {\n    console.log(\"open\");\n    validDays.push(`Today (${date})`);\n\n    if (day == 6) {\n      //if today is sat, give them today and monday\n      dayTwo = today.add(2, \"days\").format(\"MM-DD-YY\");\n      validDays.push(`Monday (${dayTwo})`);\n    } else {\n      //today and tmr\n      dayTwo = today.add(1, \"days\").format(\"MM-DD-YY\");\n      validDays.push(`Tomorrow (${dayTwo})`);\n    }\n\n    today = moment.utc(moment().format(\"MM-DD-YY HH:mm\")).utcOffset(\"PST\"); //reset today\n\n    if (today.isBefore(`${date} ${hoursOfOperation[day].slice(1)}`)) {\n      validTimesOne = availablePickUpTimes(new moment(`${date} ${hoursOfOperation[day][0]}`), new moment(`${date} ${hoursOfOperation[day][1]}`));\n    } else {\n      validTimesOne = availablePickUpTimes(today, new moment(`${date} ${hoursOfOperation[day][1]}`));\n    }\n\n    validTimesOne = validTimesOne.concat(availablePickUpTimes(new moment(`${date} ${hoursOfOperation[day][2]}`), new moment(`${date} ${hoursOfOperation[day][3]}`)));\n    validTimesTwo = availablePickUpTimes(new moment(`${dayTwo} ${hoursOfOperation[new moment(dayTwo).day()][0]}`), new moment(`${dayTwo} ${hoursOfOperation[new moment(dayTwo).day()][1]}`));\n    validTimesTwo = validTimesTwo.concat(availablePickUpTimes(new moment(`${dayTwo} ${hoursOfOperation[new moment(dayTwo).day()][2]}`), new moment(`${dayTwo} ${hoursOfOperation[new moment(dayTwo).day()][3]}`)));\n  } else {\n    console.log(\"closed today\"); //give them options for next two business days\n\n    validDays.push(`Tomorrow (${today.add(1, \"days\").format(\"MM-DD-YY\")})`);\n    validDays.push(`Monday (${today.add(2, \"days\").format(\"MM-DD-YY\")})`);\n  }\n\n  function availablePickUpTimes(startTime, endTime) {\n    console.log(startTime, endTime);\n    var times = [];\n    var firstTime = startTime.add(15 - startTime.minute() % 15, \"m\");\n    console.log(firstTime);\n    firstTime.add(15, \"m\");\n    console.log(firstTime.isBefore(endTime));\n\n    while (firstTime.isBefore(endTime)) {\n      times.push(new moment(startTime).format(\"HH:mm\"));\n      firstTime.add(\"m\", 15);\n    }\n\n    console.log(times);\n    return times;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-12 col-sm-8 col-lg-6 m-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          htmlFor: \"time\",\n          children: [\" \", \"Select Pick Up Date\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"day\",\n          className: \"form-control\",\n          onChange: handleDateChange,\n          children: validDays.map((i, ind) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: ind,\n            children: i\n          }, ind, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"\",\n          htmlFor: \"time\",\n          children: [\" \", \"Select Pick Up Date\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"day\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"time\",\n          className: \"form-control\",\n          children: validTimes.map((i, ind) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: `${i}`,\n            children: i\n          }, ind, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"fname\",\n            children: \" First Name* \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"fname\",\n            type: \"text\",\n            className: \"form-control\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"lname\",\n            children: \" Last Name* \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"lname\",\n            type: \"text\",\n            className: \"form-control\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \" Email* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"email\",\n          type: \"email\",\n          className: \"form-control\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"phone\",\n          children: \" Phone number (digits only)* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"phone\",\n          type: \"tel\",\n          pattern: \"[0-9]{3}[0-9]{3}[0-9]{4}\",\n          className: \"form-control\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group d-flex justify-content-center \",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          children: \"Review and Submit Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n\nexport default checkout;","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/checkout.js"],"names":["moment","React","checkout","validTimes","hoursOfOperation","days","closed","today","utc","format","utcOffset","day","dayStr","currTime","date","open","isBefore","slice","validTimesOne","validDays","validTimesTwo","dayTwo","console","log","push","add","availablePickUpTimes","concat","startTime","endTime","times","firstTime","minute","handleDateChange","map","i","ind"],"mappings":"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","sourcesContent":["import moment from \"moment\";\nimport React from \"react\";\n\nconst checkout = () => {\n  //select time tag: 15 min increments until close\n\n  //create all valid pickup times\n  const validTimes = [\n    \"11:15\",\n    \"11:30\",\n    \"11:45\",\n    \"12:00\",\n    \"12:15\",\n    \"12:30\",\n    \"12:45\",\n    \"13:00\",\n    \"13:15\",\n    \"13:30\",\n    \"13:45\",\n    \"14:00\",\n    \"14:15\",\n    \"14:30\",\n    \"14:45\",\n    \"16:45\",\n    \"17:00\",\n    \"17:15\",\n    \"17:45\",\n    \"18:00\",\n    \"18:15\",\n    \"18:30\",\n    \"18:45\",\n    \"19:00\",\n    \"19:15\",\n    \"19:30\",\n    \"19:45\",\n    \"20:00\",\n    \"20:15\",\n    \"20:30\",\n    \"20:45\",\n  ];\n\n  // var currentValidTimes;\n\n  const hoursOfOperation = [\n    [],\n    [\"11:15\", \"14:45\", \"16:45\", \"20:30\"],\n    [\"11:15\", \"14:45\", \"16:45\", \"20:30\"],\n    [\"11:15\", \"14:45\", \"16:45\", \"20:30\"],\n    [\"11:15\", \"14:45\", \"16:45\", \"20:30\"],\n    [\"11:15\", \"14:45\", \"16:45\", \"21:00\"],\n    [\"12:15\", \"14:45\", \"16:45\", \"21:00\"],\n  ];\n\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  const closed = true;\n\n  // const today = new Date()\n  // const currentTime = today.getHours() + \":\" + today.getMinutes();\n  // const sunday =  today.getDay() == 0;\n  // const closed = currentTime > \"20:45\" || sunday;\n  // const saturday = today.getDay() == 6; //returns 6\n  // var pickupDate , pickupDay;\n  // var nextBusinessDay;\n\n  // if(closed)\n  // {\n\n  //     var daysToSkip;\n  //     saturday? daysToSkip = 2 : daysToSkip = 1;\n  //     pickupDate = new Date(today.getTime() + (daysToSkip*86400000));\n  //     pickupDay = days[pickupDate.getDay()]\n\n  //     console.log(\"store closed, pickup will be for when we open for business on \", pickupDay, pickupDate.getMonth() +1, \"/\" ,pickupDate.getDate(),  \"/\" , pickupDate.getFullYear())\n  //     //if today is sat, then we open on monday\n  //     nextBusinessDay = `${pickupDay} ${pickupDate.getMonth() +1}/${pickupDate.getDate()}/${pickupDate.getFullYear()}`;\n  //     validTimes.splice(0,1);\n  // }\n  // else {\n  //     var index;\n  //     console.log(typeof(currentTime))\n  //     console.log(new Date(currentTime) < new Date('11:34'))\n  //     validTimes.every( (i, ind) => {\n  //         if(currentTime > i)\n  //         {\n  //             index = ind\n  //             return false;\n  //         }\n\n  //         return true;\n  //     })\n\n  //     console.log(index)\n\n  //     validTimes.splice(0, index + 1);\n  // }\n\n  var today = moment.utc(moment().format(\"MM-DD-YY HH:mm\")).utcOffset(\"PST\");\n  const day = today.day(); //number\n  const dayStr = today.format(\"dddd\"); //friday\n  const currTime = today.format(\"HH:mm\"); //string\n  const date = today.format(\"MM-DD-YY\"); //string\n  const open = today.isBefore(`${date} ${hoursOfOperation[day].slice(-1)}`);\n  var validTimesOne = [];\n  var validDays = [];\n  var validTimesTwo = [];\n  var dayTwo;\n\n  //today is open!\n  if (open) {\n    console.log(\"open\");\n    validDays.push(`Today (${date})`);\n\n    if (day == 6) {\n      //if today is sat, give them today and monday\n      dayTwo = today.add(2, \"days\").format(\"MM-DD-YY\");\n      validDays.push(`Monday (${dayTwo})`);\n    } else {\n      //today and tmr\n      dayTwo = today.add(1, \"days\").format(\"MM-DD-YY\");\n      validDays.push(`Tomorrow (${dayTwo})`);\n    }\n\n    today = moment.utc(moment().format(\"MM-DD-YY HH:mm\")).utcOffset(\"PST\"); //reset today\n\n    if (today.isBefore(`${date} ${hoursOfOperation[day].slice(1)}`)) {\n      validTimesOne = availablePickUpTimes(\n        new moment(`${date} ${hoursOfOperation[day][0]}`),\n        new moment(`${date} ${hoursOfOperation[day][1]}`)\n      );\n\n    } else {\n      validTimesOne = availablePickUpTimes(today, new moment(`${date} ${hoursOfOperation[day][1]}`));\n\n    }\n\n    validTimesOne = validTimesOne.concat(\n        availablePickUpTimes(new moment(`${date} ${hoursOfOperation[day][2]}`), new moment(`${date} ${hoursOfOperation[day][3]}`))\n      );\n\n    validTimesTwo = availablePickUpTimes(\n      new moment(`${dayTwo} ${hoursOfOperation[new moment(dayTwo).day()][0]}`),\n      new moment(`${dayTwo} ${hoursOfOperation[new moment(dayTwo).day()][1]}`)\n    );\n\n    validTimesTwo = validTimesTwo.concat(\n      availablePickUpTimes(\n        new moment(\n          `${dayTwo} ${hoursOfOperation[new moment(dayTwo).day()][2]}`\n        ),\n        new moment(`${dayTwo} ${hoursOfOperation[new moment(dayTwo).day()][3]}`)\n      )\n    );\n  } \n  else {\n    console.log(\"closed today\");\n\n    //give them options for next two business days\n    validDays.push(`Tomorrow (${today.add(1, \"days\").format(\"MM-DD-YY\")})`);\n    validDays.push(`Monday (${today.add(2, \"days\").format(\"MM-DD-YY\")})`);\n\n\n  }\n\n  function availablePickUpTimes(startTime, endTime) {\n    console.log(startTime, endTime);\n    var times = [];\n    var firstTime = startTime.add(15 - (startTime.minute() % 15), \"m\");\n\n    console.log(firstTime);\n    firstTime.add(15, \"m\");\n    console.log(firstTime.isBefore(endTime));\n\n    while (firstTime.isBefore(endTime)) {\n      times.push(new moment(startTime).format(\"HH:mm\"));\n      firstTime.add(\"m\", 15);\n    }\n    console.log(times);\n    return times;\n  }\n\n  return (\n    <div className=\"col-12 col-sm-8 col-lg-6 m-auto\">\n      {/* {closed? <p style={{color: \"red\", fontWeight: \"bold\"}}> Store Closed! Pick up will be scheduled for {nextBusinessDay}!</p> : <p></p>} */}\n      <form className=\"form\">\n        <div className=\"form-group\">\n          <label className=\"\" htmlFor=\"time\">\n            {\" \"}\n            Select Pick Up Date{\" \"}\n          </label>\n          <select name=\"day\" className=\"form-control\" onChange={handleDateChange}>\n            {validDays.map((i, ind) => (\n              <option key={ind} value={ind}>\n                {i}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label className=\"\" htmlFor=\"time\">\n            {\" \"}\n            Select Pick Up Date{\" \"}\n          </label>\n          <select name=\"day\" className=\"form-control\"></select>\n          <select name=\"time\" className=\"form-control\">\n            {validTimes.map((i, ind) => (\n              <option key={ind} value={`${i}`}>\n                {i}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col mb-2\">\n            <label htmlFor=\"fname\"> First Name* </label>\n            <input name=\"fname\" type=\"text\" className=\"form-control\" required />\n          </div>\n\n          <div className=\"col\">\n            <label htmlFor=\"lname\"> Last Name* </label>\n            <input name=\"lname\" type=\"text\" className=\"form-control\" required />\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"email\"> Email* </label>\n          <input name=\"email\" type=\"email\" className=\"form-control\" required />\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"phone\"> Phone number (digits only)* </label>\n          <input\n            name=\"phone\"\n            type=\"tel\"\n            pattern=\"[0-9]{3}[0-9]{3}[0-9]{4}\"\n            className=\"form-control\"\n            required\n          />\n        </div>\n\n        <div className=\"form-group d-flex justify-content-center \">\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Review and Submit Order\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default checkout;\n"]},"metadata":{},"sourceType":"module"}