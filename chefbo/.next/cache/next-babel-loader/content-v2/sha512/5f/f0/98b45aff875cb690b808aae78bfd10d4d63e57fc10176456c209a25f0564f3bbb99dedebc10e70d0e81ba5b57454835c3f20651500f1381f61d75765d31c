{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/components/MenuItemCate.js\";\nimport { useState, useEffect, useRoute, useRef } from 'react';\nimport MenuItem from './MenuItem';\nimport { Accordion, Card } from \"react-bootstrap\";\nimport store from '../state/GlobalState';\nimport { setLunch } from '../state/Actions'; //all the items in one category\n\nconst MenuItemCate = ({\n  cate,\n  menuItem,\n  id,\n  type,\n  myRef\n}) => {\n  const items = menuItem[0];\n  var lunch = cate == \"Lunch Specials\" ? true : false;\n  const {\n    0: newScroll,\n    1: setScroll\n  } = useState(0);\n\n  const executeScroll = () => {\n    console.log(myRef);\n    const offsetTop = myRef.current.offsetTop;\n    setScroll(offsetTop); // myRef.current.scrollIntoView()\n  };\n\n  useEffect(() => {\n    console.log(newScroll); // myRef.current.scrollTop = newScroll;\n  }, [newScroll]);\n\n  if (lunch) {\n    var lunchIds = [];\n    items.map((item, index) => {\n      lunchIds.push(item.ID);\n    });\n    store.dispatch(setLunch(lunchIds));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      ref: myRef,\n      children: [/*#__PURE__*/_jsxDEV(Accordion.Toggle, {\n        as: Card.Header,\n        eventKey: id,\n        style: {\n          fontWeight: 500\n        },\n        onClick: executeScroll,\n        children: [cate, lunch ? \" (11:00am - 3:00pm only)\" : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Accordion.Collapse, {\n        eventKey: id,\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          className: \"w-80 m-auto\",\n          id: id,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex flex-wrap justify-content-center\",\n            children: items.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n              item: item,\n              type: type\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\nexport default MenuItemCate;","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/components/MenuItemCate.js"],"names":["useState","useEffect","useRoute","useRef","MenuItem","Accordion","Card","store","setLunch","MenuItemCate","cate","menuItem","id","type","myRef","items","lunch","newScroll","setScroll","executeScroll","console","log","offsetTop","current","lunchIds","map","item","index","push","ID","dispatch","Header","fontWeight"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,QAA9B,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SACIC,SADJ,EAEIC,IAFJ,QAGS,iBAHT;AAKA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB,C,CAGE;;AACF,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,QAAP;AAAiBC,EAAAA,EAAjB;AAAqBC,EAAAA,IAArB;AAA2BC,EAAAA;AAA3B,CAAD,KAAuC;AAExD,QAAMC,KAAK,GAAGJ,QAAQ,CAAC,CAAD,CAAtB;AACA,MAAIK,KAAK,GAAIN,IAAI,IAAI,gBAAT,GAA6B,IAA7B,GAAoC,KAAhD;AACJ,QAAM;AAAA,OAACO,SAAD;AAAA,OAAYC;AAAZ,MAAyBlB,QAAQ,CAAC,CAAD,CAAvC;;AACI,QAAMmB,aAAa,GAAG,MAAK;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACA,UAAMQ,SAAS,GAAGR,KAAK,CAACS,OAAN,CAAcD,SAAhC;AACAJ,IAAAA,SAAS,CAACI,SAAD,CAAT,CAHuB,CAKvB;AACH,GAND;;AAQArB,EAAAA,SAAS,CAAC,MAAI;AACVmB,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ,EADU,CAEV;AACH,GAHQ,EAGN,CAACA,SAAD,CAHM,CAAT;;AAKA,MAAGD,KAAH,EACA;AACI,QAAIQ,QAAQ,GAAG,EAAf;AACAT,IAAAA,KAAK,CAACU,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAgB;AACtBH,MAAAA,QAAQ,CAACI,IAAT,CAAcF,IAAI,CAACG,EAAnB;AACH,KAFD;AAIAtB,IAAAA,KAAK,CAACuB,QAAN,CAAetB,QAAQ,CAACgB,QAAD,CAAvB;AACH;;AAED,sBACI;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,GAAG,EAAEV,KAAX;AAAA,8BACI,QAAC,SAAD,CAAW,MAAX;AAAkB,QAAA,EAAE,EAAER,IAAI,CAACyB,MAA3B;AAAoC,QAAA,QAAQ,EAAEnB,EAA9C;AAAmD,QAAA,KAAK,EAAE;AAACoB,UAAAA,UAAU,EAAC;AAAZ,SAA1D;AAA4E,QAAA,OAAO,EAAEb,aAArF;AAAA,mBACCT,IADD,EAECM,KAAK,GAAE,0BAAF,GAA+B,IAFrC;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,QAAC,SAAD,CAAW,QAAX;AAAoB,QAAA,QAAQ,EAAEJ,EAA9B;AAAA,+BACA,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,SAAS,EAAC,aAArB;AAAmC,UAAA,EAAE,EAAEA,EAAvC;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,yCAAf;AAAA,sBAEIG,KAAK,CAACU,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBAEN,QAAC,QAAD;AAAsB,cAAA,IAAI,EAAED,IAA5B;AAAkC,cAAA,IAAI,EAAEb;AAAxC,eAAec,KAAf;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAFJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH,CApDD;;AAuDA,eAAelB,YAAf","sourcesContent":["import { useState, useEffect, useRoute, useRef } from 'react'\nimport MenuItem from './MenuItem'\nimport {\n    Accordion,\n    Card,\n  } from \"react-bootstrap\";\n\nimport store from '../state/GlobalState';\nimport { setLunch } from '../state/Actions';\n\n\n  //all the items in one category\nconst MenuItemCate = ({cate, menuItem, id, type, myRef}) => {\n    \n    const items = menuItem[0]\n    var lunch = (cate == \"Lunch Specials\") ? true : false\nconst [newScroll, setScroll] = useState(0)\n    const executeScroll = () =>{\n        console.log(myRef)\n        const offsetTop = myRef.current.offsetTop\n        setScroll(offsetTop)\n\n        // myRef.current.scrollIntoView()\n    }\n\n    useEffect(()=>{\n        console.log(newScroll)\n        // myRef.current.scrollTop = newScroll;\n    }, [newScroll])\n\n    if(lunch)\n    {\n        var lunchIds = [];\n        items.map((item, index) =>{\n            lunchIds.push(item.ID)\n        })\n\n        store.dispatch(setLunch(lunchIds))\n    }\n\n    return  (\n        <div>  \n            <Card ref={myRef}>\n                <Accordion.Toggle as={Card.Header}  eventKey={id}  style={{fontWeight:500}} onClick={executeScroll}>\n                {cate}\n                {lunch? \" (11:00am - 3:00pm only)\" : null}\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={id} >\n                <Card.Body className=\"w-80 m-auto\" id={id} >\n                    <div className=\"d-flex flex-wrap justify-content-center\" >\n                    {\n                        items.map((item, index) =>\n                        (\n                            <MenuItem key={index} item={item} type={type}/>\n                        ))\n                    }\n                    </div>\n\n                </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </div>\n    )\n    \n}\n\n\nexport default MenuItemCate\n"]},"metadata":{},"sourceType":"module"}