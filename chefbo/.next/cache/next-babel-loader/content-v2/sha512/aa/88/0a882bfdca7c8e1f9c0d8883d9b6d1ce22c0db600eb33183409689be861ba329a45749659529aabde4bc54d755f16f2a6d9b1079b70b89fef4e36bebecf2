{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/components/checkoutForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport store from \"../state/GlobalState\";\nimport payment from \"../styles/payment.module.css\";\n\nvar CheckoutForm = function CheckoutForm(_ref) {\n  _s();\n\n  var submit = _ref.submit;\n\n  var _useState = useState(false),\n      succeeded = _useState[0],\n      setSucceeded = _useState[1];\n\n  var _useState2 = useState(null),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(''),\n      processing = _useState3[0],\n      setProcessing = _useState3[1];\n\n  var _useState4 = useState(true),\n      disabled = _useState4[0],\n      setDisabled = _useState4[1];\n\n  var _useState5 = useState(''),\n      clientSecret = _useState5[0],\n      setClientSecret = _useState5[1];\n\n  var stripe = useStripe();\n  var elements = useElements();\n\n  function getClientSecret() {\n    return _getClientSecret.apply(this, arguments);\n  }\n\n  function _getClientSecret() {\n    _getClientSecret = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var res, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetch(\"\".concat(process.env.NEXT_PUBLIC_SERVER_DOMAIN, \"/create-payment-intent\"), {\n                method: 'POST',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(store.getState())\n              });\n\n            case 2:\n              res = _context3.sent;\n              _context3.next = 5;\n              return res.json();\n\n            case 5:\n              response = _context3.sent;\n              setClientSecret(response.clientSecret);\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _getClientSecret.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    // Create PaymentIntent as soon as the page loads\n    getClientSecret();\n  }, []);\n  var cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  var cardElementStyle = {\n    borderRadius: \"4px\",\n    padding: \"12px\",\n    border: \"2px solid rgba(50, 50, 93, 0.1)\",\n    maxHeight: \"44px\",\n    background: \"white\",\n    boxSizing: \"border-box\"\n  };\n\n  var handleChange = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Listen for changes in the CardElement\n              // and display any errors as the customer types their card details\n              setDisabled(event.empty);\n              setError(event.error ? event.error.message : \"\");\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleChange(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ev) {\n      var payload;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              ev.preventDefault();\n              setProcessing(true);\n              _context2.next = 4;\n              return stripe.confirmCardPayment(clientSecret, {\n                receipt_email: store.getState().customer.email,\n                payment_method: {\n                  card: elements.getElement(CardElement)\n                }\n              });\n\n            case 4:\n              payload = _context2.sent;\n              console.log(payload);\n\n              if (payload.error) {\n                setError(\"Payment failed \".concat(payload.error.message));\n                setProcessing(false);\n              } else {\n                setError(null);\n                setProcessing(false);\n                setSucceeded(true);\n                submit();\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSubmit(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"ml-2 mr-2 form-group text-center\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-left pb-2\",\n      children: \"Enter payment information:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      style: cardElementStyle,\n      children: /*#__PURE__*/_jsxDEV(CardElement, {\n        options: cardStyle,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-danger text-align-center block\",\n      disabled: processing || disabled || succeeded,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"\".concat(payment.spinner),\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, _this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, _this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-danger\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CheckoutForm, \"ldxvBX7QZH5+6XNpO6E4nXjWQL0=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/components/checkoutForm.js"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","store","payment","CheckoutForm","submit","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","getClientSecret","fetch","process","env","NEXT_PUBLIC_SERVER_DOMAIN","method","headers","body","JSON","stringify","getState","res","json","response","cardStyle","style","base","color","fontFamily","fontSmoothing","invalid","iconColor","cardElementStyle","borderRadius","padding","border","maxHeight","background","boxSizing","handleChange","event","empty","message","handleSubmit","ev","preventDefault","confirmCardPayment","receipt_email","customer","email","payment_method","card","getElement","payload","console","log","spinner"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport store from \"../state/GlobalState\";\nimport payment from \"../styles/payment.module.css\";\n\n\n\n\nconst CheckoutForm = ({submit}) =>{\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n\n\n  async function getClientSecret()\n    {\n        const res = await fetch(`${process.env.NEXT_PUBLIC_SERVER_DOMAIN}/create-payment-intent`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(store.getState())\n        });\n        const response = await res.json();\n        setClientSecret(response.clientSecret)\n    }\n\n\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    getClientSecret()\n  }, []);\n\n\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        },\n \n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const cardElementStyle = {\n    borderRadius: \"4px\",\n    padding: \"12px\",\n    border: \"2px solid rgba(50, 50, 93, 0.1)\",\n    maxHeight: \"44px\",\n    background: \"white\",\n    boxSizing: \"border-box\"\n  }\n\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      receipt_email: store.getState().customer.email,\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    console.log(payload)\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n      submit();\n    }\n  };\n\n  return (\n    <form className=\"ml-2 mr-2 form-group text-center\" onSubmit={handleSubmit}>\n\n    <div className=\"text-left pb-2\">Enter payment information:</div>\n    <div className=\"form-group\" style={cardElementStyle}>\n        <CardElement  options={cardStyle} onChange={handleChange} />\n    </div>\n      <button\n        className=\"btn btn-danger text-align-center block\"\n        disabled={processing || disabled || succeeded}\n        id=\"submit\"\n      >\n        <span id=\"button-text\">\n          {processing ? (\n            <div className={`${payment.spinner}`} id=\"spinner\"></div>\n          ) : (\n            \"Pay now\"\n          )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className=\"text-danger\" role=\"alert\">\n          {error}\n        </div>\n      )}\n    </form>\n  );\n}\n\nexport default CheckoutForm\n"]},"metadata":{},"sourceType":"module"}