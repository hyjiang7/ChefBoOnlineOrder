{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/cart.js\";\nimport store from '../../state/GlobalState';\nimport CartItem from '../../components/CartItem';\nimport { deleteFromCart } from \"../../state/Actions\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useRouter } from 'next/router';\n\nconst cart = () => {\n  const {\n    cart\n  } = store.getState();\n  const router = useRouter();\n  const {\n    0: cartTotal,\n    1: setCartTotal\n  } = useState(0);\n  useEffect(() => {\n    console.log(\"cart has changed!\");\n    console.log(store.getState().cart);\n\n    const getTotal = () => {};\n\n    getTotal();\n  }, [cart]);\n\n  const deleteCartItem = index => {\n    store.dispatch(deleteFromCart(index, cart));\n    router.push(\"/routes/cart\");\n  };\n\n  if (store.getState().cart.length == 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \" Cart is empty! Add items to begin order.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 17\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: store.getState().cart.map((item, index) => /*#__PURE__*/_jsxDEV(CartItem, {\n      item: item,\n      index: index,\n      deleteHandle: deleteCartItem\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }, this))\n  }, void 0, false);\n};\n\nexport default cart;","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/pages/routes/cart.js"],"names":["store","CartItem","deleteFromCart","React","useState","useContext","useEffect","useRouter","cart","getState","router","cartTotal","setCartTotal","console","log","getTotal","deleteCartItem","index","dispatch","push","length","map","item"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAIA,MAAMC,IAAI,GAAG,MAAM;AAEf,QAAM;AAACA,IAAAA;AAAD,MAASR,KAAK,CAACS,QAAN,EAAf;AACA,QAAMC,MAAM,GAAGH,SAAS,EAAxB;AACA,QAAM;AAAA,OAACI,SAAD;AAAA,OAAYC;AAAZ,MAA4BR,QAAQ,CAAC,CAAD,CAA1C;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYd,KAAK,CAACS,QAAN,GAAiBD,IAA7B;;AAEA,UAAMO,QAAQ,GAAC,MAAK,CAEnB,CAFD;;AAIAA,IAAAA,QAAQ;AACT,GATM,EASL,CAACP,IAAD,CATK,CAAT;;AAWA,QAAMQ,cAAc,GAAIC,KAAD,IACvB;AAEIjB,IAAAA,KAAK,CAACkB,QAAN,CAAehB,cAAc,CAACe,KAAD,EAAQT,IAAR,CAA7B;AACAE,IAAAA,MAAM,CAACS,IAAP,CAAY,cAAZ;AACH,GALD;;AAQA,MAAInB,KAAK,CAACS,QAAN,GAAiBD,IAAjB,CAAsBY,MAAtB,IAAgC,CAApC,EACI,oBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAEJ,sBACI;AAAA,cAEQpB,KAAK,CAACS,QAAN,GAAiBD,IAAjB,CAAsBa,GAAtB,CAA0B,CAACC,IAAD,EAAOL,KAAP,kBACtB,QAAC,QAAD;AAAsB,MAAA,IAAI,EAAEK,IAA5B;AAAkC,MAAA,KAAK,EAAEL,KAAzC;AAAgD,MAAA,YAAY,EAAED;AAA9D,OAAeC,KAAf;AAAA;AAAA;AAAA;AAAA,YADJ;AAFR,mBADJ;AASH,CArCD;;AA0CA,eAAeT,IAAf","sourcesContent":["import store from '../../state/GlobalState'\nimport CartItem from '../../components/CartItem';\nimport { deleteFromCart } from \"../../state/Actions\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useRouter } from 'next/router';\n\n\n\nconst cart = () => {\n\n    const {cart} = store.getState();\n    const router = useRouter();\n    const [cartTotal, setCartTotal] = useState(0)\n\n    useEffect(() => {\n        console.log(\"cart has changed!\")\n        console.log(store.getState().cart)\n\n        const getTotal=() =>{\n            \n        }\n\n        getTotal()\n      },[cart])\n\n    const deleteCartItem = (index) =>\n    {\n        \n        store.dispatch(deleteFromCart(index, cart))\n        router.push(\"/routes/cart\")\n    }\n\n\n    if (store.getState().cart.length == 0)\n        return (<p> Cart is empty! Add items to begin order.</p>)\n    \n    return (\n        <>\n            {\n                store.getState().cart.map((item, index) =>(\n                    <CartItem key={index} item={item} index={index} deleteHandle={deleteCartItem}></CartItem>\n                ))\n            }\n        </>\n    )\n}\n\n\n\n\nexport default cart\n"]},"metadata":{},"sourceType":"module"}