{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/components/checkoutForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements, CardNumberElement, CardExpiryElement, CardCvcElement } from \"@stripe/react-stripe-js\";\nimport store from \"../state/GlobalState\";\nimport payment from \"../styles/payment.module.css\";\n\nconst CheckoutForm = ({\n  submit\n}) => {\n  const {\n    0: succeeded,\n    1: setSucceeded\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: processing,\n    1: setProcessing\n  } = useState('');\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(true);\n  const {\n    0: clientSecret,\n    1: setClientSecret\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n\n  async function getClientSecret() {\n    const res = await fetch(`http://localhost:5001/create-payment-intent`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(store.getState())\n    });\n    const response = await res.json();\n    setClientSecret(response.clientSecret);\n  }\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    getClientSecret();\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  const cardElementStyle = {\n    borderRadius: \"4px\",\n    padding: \"12px\",\n    border: \"2px solid rgba(50, 50, 93, 0.1)\",\n    maxHeight: \"44px\",\n    background: \"white\" // boxSizing: \"border-box\"\n\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      //   receipt_email: email,\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    console.log(payload);\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n      submit();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"ml-2 mr-2 form-group text-center\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-left pb-2\",\n      children: \"Enter payment information:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      style: cardElementStyle,\n      children: [/*#__PURE__*/_jsxDEV(CardNumberElement, {\n        options: cardStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardExpiryElement, {\n        options: cardStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardCvcElement, {\n        options: cardStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-danger text-align-center block\",\n      disabled: processing || disabled || succeeded,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${payment.spinner}`,\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-danger\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/Users/helenjiang/Desktop/ChefBoOnline/ChefBoOnlineOrder/chefbo/components/checkoutForm.js"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","CardNumberElement","CardExpiryElement","CardCvcElement","store","payment","CheckoutForm","submit","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","email","setEmail","stripe","elements","getClientSecret","res","fetch","method","headers","body","JSON","stringify","getState","response","json","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","cardElementStyle","borderRadius","padding","border","maxHeight","background","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","console","log","spinner"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CardElement,\n  useStripe,\n  useElements,\n  CardNumberElement,\n  CardExpiryElement,\n  CardCvcElement\n\n} from \"@stripe/react-stripe-js\";\nimport store from \"../state/GlobalState\";\nimport payment from \"../styles/payment.module.css\";\n\n\n\nconst CheckoutForm = ({submit}) =>{\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const [email, setEmail] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n\n\n  async function getClientSecret()\n    {\n        const res = await fetch(`http://localhost:5001/create-payment-intent`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(store.getState())\n        });\n        const response = await res.json();\n        setClientSecret(response.clientSecret)\n    }\n\n\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    getClientSecret()\n  }, []);\n\n\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const cardElementStyle = {\n    borderRadius: \"4px\",\n    padding: \"12px\",\n    border: \"2px solid rgba(50, 50, 93, 0.1)\",\n    maxHeight: \"44px\",\n    background: \"white\",\n    // boxSizing: \"border-box\"\n  }\n\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n    //   receipt_email: email,\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    console.log(payload)\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n      submit();\n    }\n  };\n\n  return (\n    <form className=\"ml-2 mr-2 form-group text-center\" onSubmit={handleSubmit}>\n\n    <div className=\"text-left pb-2\">Enter payment information:</div>\n    <div className=\"form-group\" style={cardElementStyle}>\n        <CardNumberElement options={cardStyle}/>\n        <CardExpiryElement options={cardStyle}/>\n        <CardCvcElement options={cardStyle}/>\n        {/* <CardElement  options={cardStyle} onChange={handleChange} /> */}\n    </div>\n      <button\n        className=\"btn btn-danger text-align-center block\"\n        disabled={processing || disabled || succeeded}\n        id=\"submit\"\n      >\n        <span id=\"button-text\">\n          {processing ? (\n            <div className={`${payment.spinner}`} id=\"spinner\"></div>\n          ) : (\n            \"Pay now\"\n          )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className=\"text-danger\" role=\"alert\">\n          {error}\n        </div>\n      )}\n      {/* Show a success message upon completion */}\n      {/* <p className={succeeded ? `${payment.resultMessage}` : `${payment.resultMessage} ${payment.hidden}`}>\n        Payment succeeded, see the result in your\n        <a\n          href={`https://dashboard.stripe.com/test/payments`}\n        >\n         \n          Stripe dashboard.\n        </a> Refresh the page to pay again.\n      </p> */}\n    </form>\n  );\n}\n\nexport default CheckoutForm"]},"metadata":{},"sourceType":"module"}